<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Imms.Abstract</name>
  </assembly>
  <members>
    <member name="T:Imms.Abstract.AbstractIterable`3">
      <summary>
                A parent class for collections of all sorts (ordered, unordered, set-like, dictionary-like) that support a form of
                iteration.
            </summary>
      <typeparam name="TElem">The type of element stored in the collection.</typeparam>
      <typeparam name="TIterable">This self-reference to the concrete collection type that implements this class.</typeparam>
      <typeparam name="TBuilder">The type of collection builder used by the collection that implements this class. </typeparam>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.DebuggerDisplay">
      <summary>
                A string representation of this object, for use with the DebuggerDisplay attribute.
            </summary>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.System#Collections#Generic#IReadOnlyCollection{TElem}#Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
      <returns>
            The number of elements in the collection. 
            </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Cartesian``3(``2,System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})">
      <summary>
            (Implementation) Cartesian product between two iterable collections. You can supply a selector to apply on the results. The current instance is the left operand of the product.
            </summary>
      <typeparam name="TRight">The type of element in the second collection.</typeparam>
      <typeparam name="TOut">The type of the output element.</typeparam>
      <typeparam name="TOIter">The type of the output collection.</typeparam>
      <param name="bFactory">A prototype instance of the resulting collection provider, used as a builder factory.</param>
      <param name="right">The right operand of the cartesian product. Must be an iterable collection. </param>
      <param name="selector">A selector.</param>
      <remarks>
            This method basically applies a function on every combination of elements from the left operand and the right operand.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Cast``2(``1)">
      <summary>
            (Implementation) Casts every element of the collection to a different type.
            </summary>
      <typeparam name="TOut">The type of the output element.</typeparam>
      <typeparam name="TOIter">The type of the collection returned by the method.</typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection used as a builder factory. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Choose``2(``1,System.Func{`0,Imms.Optional{``0}})">
      <summary>
             (Implementation) Applies a selector on every item in the collection, discarding all items for which the selector returns None.
            </summary>
      <typeparam name="TOut"> The value type of the resulting collection. </typeparam>
      <typeparam name="TOutIter"> The type of collection returned by the method. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection, used as a builder factory. </param>
      <param name="selector"> The selector. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._GroupBy``4(``0,System.Func{`0,``3},System.Func{`0,``1},System.Func{``3,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``3})">
      <summary>
            (Implementation) The GroupBy operator. Results are returned as a concrete map type, and group elements are stored as an iterator.
            </summary>
      <typeparam name="TOutMap">The type of the output map.</typeparam>
      <typeparam name="TElem2">The type of intermediate value returned by the value selector.</typeparam>
      <typeparam name="TOut">The type of the output element.</typeparam>
      <typeparam name="TKey">The type of the key used to perform the grouping.</typeparam>
      <param name="bFactory">A prototype instance of the resulting collection, used as a builder factory.</param>
      <param name="keySelector">The key selector.</param>
      <param name="valueSelector">The value selector.</param>
      <param name="resultSelector">The result selector.</param>
      <param name="eq">The eq.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._GroupBy``4(``0,``1,System.Func{`0,``3},System.Func{`0,``2},System.Collections.Generic.IEqualityComparer{``3})">
      <summary>
            (Implementation) The GroupBy operator. Results are returned as a concrete key-value map, and group elements are stored as a concrete collection type.
            </summary>
      <typeparam name="TROuterMap">The type of the return map.</typeparam>
      <typeparam name="TRInnerSeq">The type of the iterable collection used to store group elements.</typeparam>
      <typeparam name="TElem2">The return type of the value selector.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="mapFactory">A prototype instance of the returned key-value map, used as a builder factory.</param>
      <param name="seqFactory">A prototype instance of the grouping iterable collection, used as a builder factory.</param>
      <param name="keySelector">The key selector.</param>
      <param name="valueSelector">The value selector.</param>
      <param name="eq">The eq.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._GroupJoin``4(``1,System.Collections.Generic.IEnumerable{``2},System.Func{`0,``3},System.Func{``2,``3},System.Func{`0,System.Collections.Generic.IEnumerable{``2},``0},System.Collections.Generic.IEqualityComparer{``3})">
      <summary>
            (Implemnetation) The GroupJoin operator. Results are returned as a key-value map, and group elements are stored as an iterator.
            </summary>
      <typeparam name="TOutIter"> The type of the return collection. </typeparam>
      <typeparam name="TOut"> The type of element in the return collection. </typeparam>
      <typeparam name="TInner"> The type of element in the inner sequence. </typeparam>
      <typeparam name="TKey"> The type of the key. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="inner"> The inner sequence. </param>
      <param name="oKeySelector"> The outer key selector. </param>
      <param name="iKeySelector"> The inner key selector. </param>
      <param name="rSelector"> The return element selector. </param>
      <param name="eq"> The equality comparer. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Join``4(``1,System.Collections.Generic.IEnumerable{``2},System.Func{`0,``3},System.Func{``2,``3},System.Func{`0,``2,``0},System.Collections.Generic.IEqualityComparer{``3})">
      <summary>
            (Implementation) implementation of the Join operator that returns a concrete collection type.
            </summary>
      <typeparam name="TOut"> The type of element in the return sequential collection. </typeparam>
      <typeparam name="TOutIter"> The type of provider returned </typeparam>
      <typeparam name="TInner"> The type of element of the inner sequence. </typeparam>
      <typeparam name="TKey"> The type of the key used to perform the join. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="inner"> The inner sequence. </param>
      <param name="oKeySelector"> The outer key selector. </param>
      <param name="iKeySelector"> The inner key selector. </param>
      <param name="rSelector"> The return element selector. </param>
      <param name="eq"> The equality comparer. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._OrderBy``1(``0,System.Collections.Generic.IComparer{`0})">
      <summary>
            (Implementation) Constructs a sequential collection of the specified type by sorting the elements of the current collection using the specified comparer.
            </summary>
      <typeparam name="TRList">
      </typeparam>
      <param name="bFactory">
      </param>
      <param name="comparer">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Scan``2(``1,``0,System.Func{``0,`0,``0})">
      <summary>
             (Implementation) Incrementally applies an accumulator over the collection, and returns a sequence of partial results.
            </summary>
      <typeparam name="TElem2"> The type of the element in the return collection. </typeparam>
      <typeparam name="TRSeq"> The type of the return provider. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="initial"> The initial value for the accumulator. </param>
      <param name="accumulator"> The accumulator. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._SelectMany``2(``1,System.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            (Implementation) The SelectMany operation. Returns a concrete collection type.
            </summary>
      <typeparam> The type of the return provider. <name>TRProvider</name></typeparam>
      <typeparam name="TOutIter">
      </typeparam>
      <typeparam name="TOut">
      </typeparam>
      <param name="selector"> The selector. </param>
      <param name="bFactory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._SelectMany``3(``1,System.Func{`0,System.Collections.Generic.IEnumerable{``2}},System.Func{`0,System.Collections.Generic.IEnumerable{``2},``0})">
      <summary>
            (Implementation) The SelectMany operation. Returns a concrete collection of the desired type.
            </summary>
      <typeparam name="TRElem"> The type of the return element. </typeparam>
      <typeparam name="TRSeq"> The type of the return provider. </typeparam>
      <typeparam name="TElem2"> The type of sequence returned by the selector. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="selector"> The selector. </param>
      <param name="rSelector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})">
      <summary>
              Filters the collection using the specified predicate.
            </summary>
      <param name="predicate"> The predicate. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument is null.</exception>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.EmptyBuilder">
      <summary>
            Returns an empty builder used to construct a new instance of the collection.
            </summary>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.Empty">
      <summary>
            Returns an empty collection of the current type.
            </summary>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.UnderlyingCollection">
      <summary>
            The type parameter TIterable is assumed to be the implementing collection, 
            but there is no way to enforce this through the type system, so the type system doesn't "know" it.
            This property is used to convert between instances of the current type and TIterable. By default, it uses a dynamic cast.
            Dynamic casts of generically typed values are expensive (they are more expensive than 20 method calls, and 5 times more expensive than boxing),
            so this property should be overriden in an implementing type. The fact that no type cast is actually necessary doesn't improve the performance of the operation one bit.
            In order to improve performance.
            </summary>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
      <summary>
                Returns true if the collection is empty.
            </summary>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3._Select``2(``1,System.Func{`0,``0})">
      <summary>
            (Implementation) Applies a selector on each element of the collection.
            </summary>
      <typeparam name="TElem2"> The type of the return element. </typeparam>
      <typeparam name="TRSeq"> The type of the return provider. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="selector"> The selector. </param>
      <returns>
      </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractIterable`3.Length">
      <summary>
                Returns the number of elements in the collection.
            </summary>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
      <summary>
                Applies the specified function on every item in the collection, from last to first, and stops when the function returns false.
            </summary>
      <param name="function"> The function. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.op_Implicit(Imms.Abstract.AbstractIterable{`0,`1,`2})~`1">
      <summary>
                Implicit conversion from the current type to the TIterable collection type.
            </summary>
      <param name="o"> The o. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
                Copies the first several elements (according to order of iteration) of the collection to an array, starting at the
                specified array index.
            </summary>
      <param name="arr">The array to copy to.</param>
      <param name="arrStart">The array index at which to begin copying.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})">
      <summary>
                Applies an accumulator on every item in the collection, with the specified initial value.
            </summary>
      <typeparam name="TResult"> The type of the result. </typeparam>
      <param name="initial"> The initial value. </param>
      <param name="accumulator"> The accumulator. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})">
      <summary>
                Determines if all the items in the collection fulfill the specified predicate.
            </summary>
      <param name="predicate"> The predicate. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})">
      <summary>
                Returns true if any item in the collection fulfills the specified predicate.
            </summary>
      <param name="predicate"> The predicate. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.BuilderFrom(`1)">
      <summary>
            Returns a builder initialized with the specified collection. Assumed to be a cheap operation.
            </summary>
      <param name="collection">The collection to initialize the builder.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})">
      <summary>
                Returns a string representation of the elements of this collection.
            </summary>
      <param name="sep">A seperator string.</param>
      <param name="printFunc">Optionally, a function that converts every element to its string representation. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})">
      <summary>
                Returns the number of items that satisfy a given predicate.
            </summary>
      <param name="predicate"> The predicate. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})">
      <summary>
                Tries to find the first item that matches the specified predicate, returning None if no item was found.
            </summary>
      <param name="predicate"> The predicate. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})">
      <summary>
                Applies the specified delegate on every item in the collection, from first to last.
            </summary>
      <param name="action"> The action. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})">
      <summary>
                Finds the first item for which the specified selector returns Some.
            </summary>
      <typeparam name="TResult"> The type of the result. </typeparam>
      <param name="selector"> The selector. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,System.Int32,Imms.Optional{``0}})">
      <summary>
                Finds the first item for which the specified selector returns Some.
            </summary>
      <typeparam name="TResult"> The type of the result. </typeparam>
      <param name="selector"> The selector. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})">
      <summary>
                Applies an accumulator on each element in the sequence. Begins by applying the accumulator on the first two
                elements.
            </summary>
      <param name="fold"> The accumulator </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument is null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.Single">
      <summary>
                Returns the first and only item in the sequence. Throws an exception if the sequence doesn't have exactly one item.
            </summary>
      <returns>
      </returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty, or if it contains more than 1 element.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)">
      <summary>
                Copies the collection into the specified array, starting from the specified array index.
            </summary>
      <param name="array"> The array. </param>
      <param name="arrayIndex"> The index at which to start copying. </param>
    </member>
    <member name="M:Imms.Abstract.AbstractIterable`3.ToArray">
      <summary>
                Converts this collection to an array.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.IterableDebugView`1">
      <summary>
                Generic DebugView for an iterable collection.
            </summary>
    </member>
    <member name="M:Imms.Abstract.IterableDebugView`1.#ctor(Imms.Abstract.IAnyIterable{`0})">
      <summary>
            Constructs an IterableDebugView for the list.
            </summary>
      <param name="list">
      </param>
    </member>
    <member name="P:Imms.Abstract.IterableDebugView`1.Object">
      <summary>
            The object for which this debug view is for.
            </summary>
    </member>
    <member name="P:Imms.Abstract.IterableDebugView`1.Length">
      <summary>
            The length of the collection.
            </summary>
    </member>
    <member name="P:Imms.Abstract.IterableDebugView`1.zItems">
      <summary>
            Converts the collection to an array, showing its elements.
            </summary>
    </member>
    <member name="T:Imms.Abstract.IAnyIterableBuilder`1">
      <summary>
            Represents a collection builder for an iterable collection. Collection builders are mutable collections that produce immutable ones. This interface is used for abstracting over all collection builders, when the specific collection type is not known.
            </summary>
      <typeparam name="TElem">The type of element stored in the collection.</typeparam>
    </member>
    <member name="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)">
      <summary>
            Adds an element to the collection.
            </summary>
      <param name="elem">The element to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds a range of elements to the builder.
            </summary>
      <param name="items">
      </param>
    </member>
    <member name="P:Imms.Abstract.IAnyIterableBuilder`1.Length">
      <summary>
            Gets the length of the builder.
            </summary>
    </member>
    <member name="T:Imms.Abstract.IAnyMapBuilder`2">
      <summary>
            A collection builder for map-like collections.
            </summary>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
    </member>
    <member name="M:Imms.Abstract.IAnyMapBuilder`2.TryGetKvp(`0)">
      <summary>
            Returns the key-value pair with the specified key, or None if no such pair exists.
            </summary>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.IAnyMapBuilder`2.Remove(`0)">
      <summary>
            Removes the specified key from the map, if it exists. Returns true if a key was removed, and false otherwise.
            </summary>
      <param name="key">The key to remove.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.AbstractMap`3">
      <summary>
            Abstracts over maps of any kind.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TMap">A self-reference to the type implementing this class.</typeparam>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#TryGetValue(`0,`1@)">
      <summary>
            Gets the value that is associated with the specified key.
            </summary>
      <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.
            </returns>
      <param name="key">The key to locate.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
      <returns>
            true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#Clear">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only. </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The key of the element to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#Item(System.Object)">
      <summary>
            Gets or sets the element with the specified key.
            </summary>
      <returns>
            The element with the specified key.
            </returns>
      <param name="key">The key of the element to get or set. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
      <returns>
            true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.System#Collections#IDictionary#IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
      <returns>
            true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
            </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.Keys">
      <summary>
                The keys contained in this map.
            </summary>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.Values">
      <summary>
                The values contained in this map.
            </summary>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.TryGetKvp(`0)">
      <summary>
            Tries to find the key-value pair with the specified key, or returns None.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Adds a new key-value pair to the map.
            </summary>
      <param name="kvp">The key-value pair.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.TryGet(`0)">
      <summary>
            Returns the value associated with the specified key, or None if no such key exists.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.ContainsKey(`0)">
      <summary>
                Returns true if the specified key is contained in the map.
            </summary>
      <param name="k"> The key. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})">
      <summary>
                Applies the specified accumulator on each key-value pair.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="initial">The initial.</param>
      <param name="accumulator">The accumulator.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.IsCompatibleWith(`2)">
      <summary>
               Determines whether the specified map is compatible with this one (in terms of equality semantics, for example).
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>
            Determines whether this map is equal to a sequence of key-value pairs. Maps are equal if they contain the same keys, and if the values associated with them are also equal.
            </summary>
      <param name="other">The sequence of key-value pairs, understood to be a map.</param>
      <param name="eqComparer">Optionally, an equality comparer for determining the equality of values. If not specified, the default equality comparer for the type is used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`1})">
      <summary>
            Determines whether this map is equal to a sequence of key-value pairs. Maps are equal if they contain the same keys, and if the values associated with them are also equal.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <param name="comparer">A comparer for determining the equality of values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{`1,`1,System.Boolean})">
      <summary>
            Determines whether this map is equal to a sequence of key-value pairs. Maps are equal if they contain the same keys, and if the values associated with them are also equal.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <param name="equality">A function for determining equality between values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.MapEquals(`2,System.Func{`1,`1,System.Boolean})">
      <summary>
            Determines whether this map is equal to a sequence of key-value pairs. Maps are equal if they contain the same keys, and if the values associated with them are also equal.
            </summary>
      <param name="other">The sequence of key-value pairs.</param>
      <param name="valueEq">A function for determining equality between values.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Count(System.Func{`0,`1,System.Boolean})">
      <summary>
                Counts the number of items that fulfill the specified predicate.
            </summary>
      <param name="predicate">The predicate.</param>
    </member>
    <member name="P:Imms.Abstract.AbstractMap`3.Item(`0)">
      <summary>
            Returns the value associated with the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.ForEach(System.Action{`0,`1})">
      <summary>
                Iterates unconditionally over each key-value pair.
            </summary>
      <param name="act">The act.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Any(System.Func{`0,`1,System.Boolean})">
      <summary>
                Returns true if any key-value pair matches the specified predicate.
            </summary>
      <param name="predicate">The predicate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.ForEachWhile(System.Func{`0,`1,System.Boolean})">
      <summary>
                Iterates over each key-value pair until the specified predicate returns false.
            </summary>
      <param name="act">The predicate.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Find(System.Func{`0,`1,System.Boolean})">
      <summary>
                Finds the first key-value pair that matches the specified predicate.
            </summary>
      <param name="predicate">The predicate.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Join``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})">
      <summary>
                Joins this map with another map by key, returning a map consisting of the keys present in both maps, the value of each such key being determined by the specified collision resolution function.
            </summary>
      <typeparam name="TValue2">The type of value of the second map.</typeparam>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <param name="selector">The function that determines the value associated with each key in the new map.</param>
      <remarks>
            A map join operation is an operation over maps of key-value pairs, which is analogous to an intersection operation over sets.
            The operation returns a new key-value map consisting of only those keys present in both maps, 
            with the value associated with each key being determined by the collision resolution function.
            The collision resolution function takes as input the key, and the values associated with that key in the two maps.
            This method is optimized when the input collection is a map compatible with this one.
            </remarks>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3._Join``3(``1,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,``2})">
      <summary>
                Joins two maps by their keys, applying the specified collision resolution function to determine the value in the
                return map.
            </summary>
      <typeparam name="TValue2">The type of the value in the second collection.</typeparam>
      <typeparam name="TRMap">The type of the return map.</typeparam>
      <typeparam name="TRValue">The type of the tr value.</typeparam>
      <param name="bFactory">A prototype instance used as a builder factory.</param>
      <param name="other">The other map.</param>
      <param name="collision">The collision resolution function.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Removes several keys from this key-value map.
            </summary>
      <param name="keys">A sequence of keys to remove. Can be much faster if it's a set compatible with this map.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Subtract``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
      <summary>
                Subtracts the key-value pairs in the specified map from this one, applying the subtraction function on each key shared between the maps.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <param name="subtraction">Optionally, a subtraction function that generates the value in the resulting key-value map. Otherwise, key-value pairs are always removed.</param>
      <remarks>
            Subtraction over maps is anaologous to Except over sets. 
            If the subtraction function is not specified (or is null), the operation simply subtracts all the keys present in the other map from this one.
            If a subtraction function is supplied, the operation invokes the function on each key-value pair shared with the other map. If the function returns a value,
            that value is used in the return map. If the function returns None, the key is removed from the return map.
            </remarks>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Merge(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})">
      <summary>
                Merges the two maps, applying the selector function for keys appearing in both maps.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <param name="collision">
                The collision resolution function. If null, the values in the other map overwrite the values in this map.
            </param>
      <remarks>
            The merge operation is analogous to a union operation over sets. 
            
            This operation returns all key-value pairs present in either map. If a key is shared between both maps, the collision resolution function is applied to determine the value in the result map.
            </remarks>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Set(`0,`1,System.Boolean)">
      <summary>
            Adds a new key-value pair to the map, possibly overwriting any previous value.
            </summary>
      <param name="key">The key to add.</param>
      <param name="value">The value to add.</param>
      <param name="overwrite">Whether the operation is allowed to overwrite.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Set(`0,`1)">
      <summary>
            Adds a new key-value pair to the map, overwriting any previous value.
            </summary>
      <param name="key">The key to add.</param>
      <param name="value">The value to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Add(`0,`1)">
      <summary>
            Adds a new key-value pair to the map, throwing an exception if a pair with this key already exists.
            </summary>
      <param name="key">The key to add.</param>
      <param name="value">The value to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Remove(`0)">
      <summary>
            Removes a key from the map.
            </summary>
      <param name="key">The key to remove.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
                Adds a sequence of key-value pairs to the map, throwing an exception on collision.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">
                Thrown if the map already contains one of the keys, or if there are duplicate keys
                in the sequence.
            </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.SetRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
                Adds a sequence of key-value pairs to the map, overwriting old data on collision.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">
      </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Merge(`2,Imms.ValueSelector{`0,`1,`1,`1})">
      <summary>
                Merges the two maps, applying the specified collision resolution function for every key that appears in both maps.
                <br />
                Override this operation to implement it efficiently.
            </summary>
      <param name="other">The other.</param>
      <param name="collision">
                Optionally, a collision resolution function. If null, data in the other map overwrites data in the current map.
            </param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Join(`2,Imms.ValueSelector{`0,`1,`1,`1})">
      <summary>
                Joins two maps by their keys, applying the specified collision resolution function to determine the value in the
                return map.
                Override this operation to implement it efficiently.
            </summary>
      <param name="other">The other.</param>
      <param name="collision">The collision.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Subtract(`2,Imms.ValueSelector{`0,`1,`1,Imms.Optional{`1}})">
      <summary>
                Performs the Except operation, potentially removing all the keys present in the other map.
                Override this operation to implement it efficiently.
            </summary>
      <param name="other">The other map.</param>
      <param name="subtraction">
                A substraction selector that determines the new value (if any) when a collision occurs. If
                null, colliding keys are removed.
            </param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.All(System.Func{`0,`1,System.Boolean})">
      <summary>
                Returns true if all the key-value pairs satisfy the predicate.
            </summary>
      <param name="predicate">The predicate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Difference(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
                Returns a map consisting of all the key-value pairs where the key is contained in exactly one map.
            </summary>
      <param name="other">A sequence of key-value pairs. This operation is much faster if it's a map compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Difference(`2)">
      <summary>
                Returns a new map containing only those key-value pairs present in exactly one of the maps.
            </summary>
      <param name="other">The other.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})">
      <summary>
                Returns the first value for which the specified selector returns Some, or None if this doesn't happen.
            </summary>
      <typeparam name="TResult">The type of the result.</typeparam>
      <param name="selector">The selector.</param>
    </member>
    <member name="T:Imms.Abstract.AbstractSequential`2">
      <summary>
                Parent class of all list-like collections, where elements appear in a certain order and may be indexed.
            </summary>
      <typeparam name="TList"> The type of the underlying collection. </typeparam>
      <typeparam name="TElem"> The type of element stored in the collection. </typeparam>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32,System.Int32)">
      <summary>
                Returns a new collection containing a slice of the current collection, from index to index. The indexes may be
                negative.
            </summary>
      <param name="from"> The initial index. </param>
      <param name="to"> The end index. </param>
      <returns>
      </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32)">
      <summary>
                Returns the element at the specified index.
            </summary>
      <param name="index">
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the specified index doesn't exist.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.TryGet(System.Int32)">
      <summary>
            Returns the element at the specified index, or None if no element was found.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.First">
      <summary>
                Returns the first element in the collection.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.Last">
      <summary>
                Gets the last element in the collection.
            </summary>
      <value> The last. </value>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.TryFirst">
      <summary>
                Returns the first element or None.
            </summary>
      <value> The first element, or None if the collection is empty.</value>
    </member>
    <member name="P:Imms.Abstract.AbstractSequential`2.TryLast">
      <summary>
                Gets the last element or None.
            </summary>
      <value> The last element, or None if the collection is empty. </value>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
      <summary>
                Copies a range of elements from the collection to the specified array.
            </summary>
      <param name="arr"> The array. </param>
      <param name="myStart"> The index of the collection at which to start copying. May be negative.</param>
      <param name="arrStart">The index of the array at which to start copying. May be negative.</param>
      <param name="count"> The number of items to copy. Must be non-negative.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the array is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the array isn't long enough, or one of the parameters is
                invalid.
            </exception>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.Equals(`1)">
      <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.op_Equality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})">
      <summary>
                Determines structural equality between the sequential collections.
            </summary>
      <param name="a">The first collection</param>
      <param name="b">The second collection.</param>
      <returns>
                Whether the two collections are equal.
            </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.op_Inequality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})">
      <summary>
                Determines structural inequality.
            </summary>
      <param name="a">The first collection</param>
      <param name="b">The second collection.</param>
      <returns>
                Whether the two collections are unequal.
            </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.Equals(System.Object)">
      <summary>
                Determines structural inequality with obj. Two sequential collections are equal if they contain the same sequence of elements, and are of the same type.
            </summary>
      <param name="obj">Another object (a sequential collection) to compare with this instance.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.GetHashCode">
      <summary>
                Returns a structural hash code for this collection. Uses the default hash function of the elements.
            </summary>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.GetItem(System.Int32)">
      <summary>
                Returns the element at the specified index. Doesn't  support negative indexing.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.GetRange(System.Int32,System.Int32)">
      <summary>
                Returns a range of elements. Doesn't support negative indexing.
            </summary>
      <param name="from">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})">
      <summary>
                Applies an accumulator on every item in the sequence, from last to first.
            </summary>
      <typeparam name="TResult"> The type of the result. </typeparam>
      <param name="initial"> The initial value. </param>
      <param name="fold"> The accumulator. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the accumulator is null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})">
      <summary>
                Finds the index of the first item that matches the specified predicate.
            </summary>
      <param name="predicate"> The predicate. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the predicate is null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.FindIndex(`0)">
      <summary>
                Returns the first index of the specified element using the default equality comparer.
            </summary>
      <param name="elem">The element to find.</param>
      <returns>The index of the element, or None if it wasn't found.</returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                Returns true if this sequence is equal to the other sequence, using an optional value equality comparer.
            </summary>
      <param name="other">
      </param>
      <param name="eq">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(`1,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <param name="eq">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.FindLastIndex(System.Func{`0,System.Boolean})">
      <summary>
            Returns the index of the last element that satisfies the given predicate.
            </summary>
      <param name="predicate">The predicate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.FindLast(System.Func{`0,System.Boolean})">
      <summary>
                Tries to find the last item that matches the specified predicate, returning None if no such item was found.
            </summary>
      <param name="predicate"> The predicate. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the predicate is null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.ForEachBack(System.Action{`0})">
      <summary>
                Applies the specified delegate on every item in the collection, from last to first.
            </summary>
      <param name="action"> The action. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the delegate is null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.ForEachBackWhile(System.Func{`0,System.Boolean})">
      <summary>
                Applies the specified delegate on every item in the collection, from last to first, until it returns false.
            </summary>
      <param name="function"> The function. </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the function null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.ForEachWhileI(System.Func{`0,System.Int32,System.Boolean})">
      <summary>
                Applies an function over each element-index pair in the collection, from first to last, and stops if the function
                returns false.
            </summary>
      <param name="function"> The function. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.AggregateBack(System.Func{`0,`0,`0})">
      <summary>
                Applies an accumulator on each element in the sequence. Begins by applying the accumulator on the first two
                elements. Runs from last to first.
            </summary>
      <param name="fold"> The accumulator </param>
      <returns> The final result of the accumulator </returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.Reverse">
      <summary>
                Returns a reversed collection.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.Skip(System.Int32)">
      <summary>
                Returns a new collection without the specified initial number of elements. Returns empty if
                <paramref name="count" /> is equal or greater than Length.
            </summary>
      <param name="count"> The number of elements to skip. </param>
      <exception cref="T:System.ArgumentException">Thrown if the argument is smaller than 0.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.SkipWhile(System.Func{`0,System.Boolean})">
      <summary>
                Discards the initial elements in the collection until the predicate returns false.
            </summary>
      <param name="predicate"> The predicate. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument is null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
                Copies the first several elements (according to order of iteration) of the collection to an array, starting at the
                specified array index.
            </summary>
      <param name="arr">The array to copy to.</param>
      <param name="arrStart">The array index at which to begin copying.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.Take(System.Int32)">
      <summary>
                Returns a subsequence consisting of the specified number of elements. Returns empty if <paramref name="count" /> is
                greater than Length.
            </summary>
      <param name="count"> The number of elements.. </param>
      <exception cref="T:System.ArgumentException">Thrown if the argument is smaller than 0.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2.TakeWhile(System.Func{`0,System.Boolean})">
      <summary>
                Returns the first items until the predicate returns false.
            </summary>
      <param name="predicate"> The predicate. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2._ScanBack``2(``1,``0,System.Func{``0,`0,``0})">
      <summary>
              Implementation for a method that incrementally applies an accumulator over the collection, and returns a sequence of partial results. Runs from last to first.
            </summary>
      <typeparam name="TElem2"> The type of the element in the return collection. </typeparam>
      <typeparam name="TRSeq"> The type of the return provider. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="initial"> The initial value for the accumulator. </param>
      <param name="accumulator"> The accumulator. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the argument null.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSequential`2._Zip``3(``1,System.Collections.Generic.IEnumerable{``2},System.Func{`0,``2,``0})">
      <summary>
              Implementation for a method that joins the elements of this collection with those of a sequence by index, and uses a result selector to construct a return collection.
            </summary>
      <typeparam name="TRElem"> The type of the R elem. </typeparam>
      <typeparam name="TRSeq"> The type of the R provider. </typeparam>
      <typeparam name="TInner"> The type of the inner. </typeparam>
      <param name="bFactory"> A prototype instance of the resulting collection provider, used as a builder factory. </param>
      <param name="o"> The o. </param>
      <param name="selector"> The selector. </param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.SequentialDebugView`1">
      <summary>
            Provides a general debug view for a sequential collection.
            </summary>
    </member>
    <member name="M:Imms.Abstract.SequentialDebugView`1.#ctor(Imms.Abstract.IAnyIterable{`0})">
      <summary>
            Constructs a debug view for the specified collection.
            </summary>
      <param name="list">The collection.</param>
    </member>
    <member name="P:Imms.Abstract.SequentialDebugView`1.First">
      <summary>
            Returns the first element of the collection.
            </summary>
    </member>
    <member name="P:Imms.Abstract.SequentialDebugView`1.Last">
      <summary>
            Returns the last element of the collection.
            </summary>
    </member>
    <member name="P:Imms.Abstract.SequentialDebugView`1.zIterableView">
      <summary>
            Acts as though this type inherits from IterableDebugView. Actual inheritance is not used because this makes the debug view appear differently.
            </summary>
    </member>
    <member name="T:Imms.Abstract.ISequentialBuilder`2">
      <summary>
            A collection builder for sequential, list-like collections.
            </summary>
      <typeparam name="TElem">The type of element stored in the collection.</typeparam>
      <typeparam name="TList">The type of collection produced by this builder.</typeparam>
    </member>
    <member name="T:Imms.Abstract.AbstractSet`2">
      <summary>
                Parent of all unordered collections containing distinct values, which can efficiently determine membership.
            </summary>
      <typeparam name="TElem">
      </typeparam>
      <typeparam name="TSet">
      </typeparam>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Contains(`0)">
      <summary>
                Returns true if the item is contained in the set.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Imms.Abstract.AbstractSet`2.Item(`0)">
      <summary>
            Returns true if the item is contained in this set.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Identical to <see cref="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})" />.
            </summary>
      <param name="items">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.RelatesTo(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Returns the set-theoretic relation between this set and a sequence of elements. This member is optimized depending on the
                actual type of the input.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Add(`0)">
      <summary>
            Adds a new item to the set, or does nothing if the item already exists.
            </summary>
      <param name="item">The item to add.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Remove(`0)">
      <summary>
            Removes an item from the set, or does nothing if the item does not exist.
            </summary>
      <param name="item">The item to remove.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.TryGet(`0)">
      <summary>
            Returns the instance of the specified element, as it appears in this set, or None if no such instance exists.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Returns if this set is set equal to a sequence of elements (using the current set's membership semantics).
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Returns true if this set is a superset of a sequence of elements. Uses the current set's membership semantics.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Returns true if this set is a proper superset of the other set. 
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Returns true if this set is a proper subset of the other set.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Returns true if this set is a subset of the other set.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Difference(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Difference(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Applies a symmetric difference/XOR between a set, and a set-like collection.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.ExceptInverse(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Applies an inverse except operation, essentially other - this.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsCompatibleWith(`1)">
      <summary>
                Checks if this set is compatible with (e.g. same equality semantics) with another set.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Except(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Performs the set-theoretic Except operation (non-symmetric difference) with the other collection.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Applies the set-theoretic Intersect operation.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Intersect(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Returns true if this set is disjoint (shares no elements with) 'other'. The empty set is disjoint with all sets.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.RelatesTo(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Union(`1)">
      <summary>
                Override this to provide an efficient implementation for the operation.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Returns the set-theoretic union between this set and a set-like collection.
            </summary>
      <param name="other">A sequence of values. This operation is much faster if it's a set compatible with this one.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.IAnySetBuilder`1">
      <summary>
            A collection builder for set-like collections. This builder is used for abstracting over builders of all collections, no matter the type
            </summary>
      <typeparam name="TElem">The type of element stored in the collection.</typeparam>
    </member>
    <member name="M:Imms.Abstract.IAnySetBuilder`1.Remove(`0)">
      <summary>
            Removes the specified element from the set, if it exists. Returns true if an element was removed.
            </summary>
      <param name="value">The element to remove.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.IAnySetBuilder`1.Contains(`0)">
      <summary>
            Returns true if the specified element is contained in the set.
            </summary>
      <param name="value">The element to check for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.ISetBuilder`2">
      <summary>
            A collection builder for set-like collections. Builders are mutable objects that can produce immutable collections.
            </summary>
      <typeparam name="TElem">The type of element stored in the collection.</typeparam>
      <typeparam name="TSet">The set-like collection type produced by the builder.</typeparam>
    </member>
    <member name="T:Imms.Abstract.Comparers">
      <summary>
                Container static class for various methods for creating comparers and equality comparers.
            </summary>
    </member>
    <member name="M:Imms.Abstract.Comparers.CreateComparer``1(System.Comparison{``0})">
      <summary>
                Creates a comparer from the specified comparison function.
            </summary>
      <typeparam name="T">The type for which the comparer is created.</typeparam>
      <param name="comparison">The comparison function.</param>
    </member>
    <member name="M:Imms.Abstract.Comparers.CreateEqComparer``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
      <summary>
                Creates an equality comparer from the specified equality and hash functions.
            </summary>
      <typeparam name="T">The type for which the equality comparer is created.</typeparam>
      <param name="equals">The function that determines equality.</param>
      <param name="hash">The hash function.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparers.KeyComparer``2(System.Func{``0,``1})">
      <summary>
                Returns an IComparer implementation that compares objects by key.
            </summary>
      <typeparam name="T">The type of the comparer.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="selector">The key selector function.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparers.KeyComparer``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
                Returns an IComparer implementation that compares objects by key.
            </summary>
      <typeparam name="T">The type of the comparer.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="selector">The key selector function.</param>
      <param name="comparer">A comparer used to compare the keys.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparers.LexSequenceComparer``1(System.Collections.Generic.IComparer{``0})">
      <summary>
                Returns a lexicographic sequence comparer, which compares each element according to its position, from first to
                last.
            </summary>
      <param name="comparer">The comparer used to compare each element of the sequence.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparers.LexSequenceComparer``1">
      <summary>
                Returns a lexicographic sequence comparer, which compares each element according to its position, from first to
                last.
            </summary>
      <typeparam name="T">The type of element being compared. Must be IComparable[T].</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparers.SequenceEquality``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                Returns an equality comparer for sequences, determining equality sequentially.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="eq">Optionally, an equality comparer for the elements. Otherwise, the default equality comparer is used.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.IAnyIterable`1">
      <summary>
                Used for abstracting over any Iterable collection type when the concrete type is unknown.
                Should not be implemented in user code. Mainly provided for optimization purposes.
            </summary>
      <typeparam name="TElem">
      </typeparam>
    </member>
    <member name="P:Imms.Abstract.IAnyIterable`1.Length">
      <summary>
                Returns the number of elements in the collection.
            </summary>
    </member>
    <member name="M:Imms.Abstract.IAnyIterable`1.ForEachWhile(System.Func{`0,System.Boolean})">
      <summary>
                Applies the specified delegate on every item in the collection, in the default ordering, until the function returns false
            </summary>
      <param name="function"> The function. </param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Abstract.IMapBuilder`3">
      <summary>
            Abstracts over map builders of any kind.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TMap">The type of the map built by this builder.</typeparam>
    </member>
    <member name="T:Imms.Abstract.IIterableBuilder`2">
      <summary>
            A builder for any iterable collection. A builder is a mutable collection used to produce immutable collections.
            </summary>
      <typeparam name="TElem">The element type stored by the collection.</typeparam>
      <typeparam name="TResult">The type of collection produced by the builder.</typeparam>
    </member>
    <member name="M:Imms.Abstract.IIterableBuilder`2.Produce">
      <summary>
            Produces the result collection. While this method should be callable more than once, and should be efficient, it normally reduces the efficiency of future operations on this builder
            </summary>
    </member>
    <member name="T:Imms.Abstract.IBuilderFactory`1">
      <summary>
                Represents a builder factory, which produces builders for some collection type. Used for abstracting over all builders, for any collection and element type.
            </summary>
      <typeparam name="TBuilder">The type of builder this factory produces.</typeparam>
    </member>
    <member name="P:Imms.Abstract.IBuilderFactory`1.EmptyBuilder">
      <summary>
                Returns an empty builder.
            </summary>
    </member>
    <member name="T:Imms.Abstract.Comparisons">
      <summary>
                Contains utility and extension methods for comparisons between different objects, mainly sequences or collections.
            </summary>
    </member>
    <member name="M:Imms.Abstract.Comparisons.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines set equality between sequences. That is, they must contain the same elements, but the multiplicity of
            each element doesn't matter.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <param name="other">The other.</param>
      <param name="eq">Optionally, the equality comparer used for the values. If not specified, the default equality comparer is used.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.MapEquals``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Determines equality between sequences of key-value pairs. That is, they must have the same key-value pairs, but the
            multiplicity of each key-value pair doesn't matter.
            </summary>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="self">The first sequence of key-value pairs.</param>
      <param name="other">The second sequence of key-value pairs.</param>
      <param name="vEq">The equality comparer used to compare the values..</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.LexCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
                Determines whether this sequence is bigger than the other using a lexicographic comparison (comparing each element
                based on its position, from first to last).
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">
      </param>
      <param name="other">
      </param>
      <param name="comparer">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.LexCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                Determines whether this sequence is bigger than the other using lexicographic comparison.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">
      </param>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.NumCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Determines whether this sequence is bigger than the other using number-like comparison (length first, then
            lexicographically).
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="first">The first sequence, which is compared to the second sequence</param>
      <param name="second">The second sequence.</param>
      <param name="comparer">The comparer.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.NumCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether this sequence is bigger than the other using number-like comparison (length first, then
            lexicographically).
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="first">The first sequence, which is compared to the second sequence.</param>
      <param name="second">The second sequence.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Abstract.Comparisons.CompuateSeqHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Computes a hash code for a sequence.
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="self">The sequence for which to compute the hash code.</param>
      <param name="eq">The equality comparer used to generate the hash of each element. If not specified, default equality comparer is used.</param>
      <returns>
      </returns>
    </member>
    <member name="N:Imms.Abstract">
      <summary>
        <para>Contains high-level abstractions to be used by the Imms library, including common implementations of various methods and interfaces.</para>
        <para>Uses advanced features of the .NET generics system. Not recommended for external use at this stage.</para>
      </summary>
    </member>
    <member name="T:Imms.Abstract.FakeCollection`1">
      <summary>
                Fake collection encapsulating an IEnumerable[T]. Readonly and not very functional, but gets length in O(1). <br />
                Only reason for existence is because IDictionary[TKey, TValue] requires it.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Imms.Abstract.FakeCollection`1.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Imms.Abstract.FakeCollection`1.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:Imms.Abstract.FakeCollection`1.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
      <returns>
            true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
    </member>
    <member name="T:Imms.NoValueException">
      <summary>
                Indicates that an attempt was made to access the Value property of an Optional with no value.
            </summary>
    </member>
    <member name="M:Imms.NoValueException.#ctor(System.Type,System.String)">
      <summary>
                Creates a new instance of NoValueException for the option type 't'.
            </summary>
      <param name="t">
      </param>
      <param name="message">An optional extra message.</param>
    </member>
    <member name="M:Imms.Errors.Key_exists(System.Object)">
      <summary>
            The key already exists in the dictionary.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Errors.Key_not_found(System.Object)">
      <summary>
            A key wasn't found in a dictionary.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.FastMath">
            Implements fast math operations.
        </member>
    <member name="M:Imms.FastMath.PowN(System.Int32,System.Int32)">
      <summary>
            Calculates b^e ('b' to the power of 'e') much faster than Math.Pow. Uses a lookup table. b must be in [2,10], maximum for 'e' depends on base.
            </summary>
    </member>
    <member name="T:Imms.CollectionExt">
      <summary>
                Extensions for IEnumerable and collection classes.
            </summary>
    </member>
    <member name="M:Imms.CollectionExt.TryGuessLength``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                Tries the guess the length of the sequence by checking if it's a known collection type, WITHOUT iterating over it.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="items">The items.</param>
      <returns>The length of the sequence, or None if the guess didn't work.</returns>
    </member>
    <member name="M:Imms.CollectionExt.ToArrayFast``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
      <summary>
                Converts a sequence to an array efficiently. The array may be longer than the sequence. The final elements will be
                their defualt values.<br />
                The length of the sequence is returned in the  output parameter. <br />
                It is extremely unsafe to modify the array!!!!
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="items"> The sequence. </param>
      <param name="length"> The length of the sequence, computed while converting it to an array. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.CollectionExt.ToArrayWithLengthHint``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
      <summary>
                Constructs an array from a sequence using a length hint.. <br />
                The length hint parameter also returns the number of items in the sequence. The array is returned not truncated
                (e.g. it can have uninitialized elements in the end).
            </summary>
      <param name="o">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.ReflectExt">
      <summary>
                Contains utility and extension methods for working with types and type members.
            </summary>
    </member>
    <member name="M:Imms.ReflectExt.PrettyName(System.Type)">
      <summary>
                Returns a pretty name for the type, such as using angle braces for a generic type.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.ReflectExt.JustTypeName(System.Type)">
      <summary>
                Returns the name of the type, without the ` symbol or generic type parameterization.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.StructTuple`2">
      <summary>
                Fast value type singleton tuple.
            </summary>
      <typeparam name="T1">The type of the first element</typeparam>
      <typeparam name="T2">The type of the second element</typeparam>
    </member>
    <member name="T:Imms.StructTuple">
      <summary>
                Utility methods for fast struct tuples.
            </summary>
    </member>
    <member name="M:Imms.StructTuple.Create``2(``0,``1)">
      <summary>
                Creates a 2-StructTuple containing 'a' and 'b'
            </summary>
      <typeparam name="T1">The type of the first element</typeparam>
      <typeparam name="T2">The type of the second element</typeparam>
      <param name="a">The first element.</param>
      <param name="b">The second element.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.Kvp">
      <summary>
                Utility methods for working with key-value pairs.
            </summary>
    </member>
    <member name="M:Imms.Kvp.Of``2(``0,``1)">
      <summary>
            Constructs a new key-value pair.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="k">The key.</param>
      <param name="v">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})">
      <summary>
            Constructs a new key-value pair from a 2-tuple.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="pair">The 2-tuple.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})">
      <summary>
            Turns a key-value pair into a tuple.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <param name="pair">The key-value pair.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.IAnyOptional">
      <summary>
            Represents an optional value, where the underlying value type is unknown. User for abstracting over all optional types.
            </summary>
    </member>
    <member name="P:Imms.IAnyOptional.IsSome">
      <summary>
            Indicates whether this instance wraps a value.
            </summary>
    </member>
    <member name="P:Imms.IAnyOptional.IsNone">
      <summary>
            True if this instance has no underlying value.
            </summary>
    </member>
    <member name="P:Imms.IAnyOptional.Value">
      <summary>
            Gets the underlying value, or throws an exception if none exists.
            </summary>
    </member>
    <member name="T:Imms.Optional`1">
      <summary>
                A type that indicates an optional value of type <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="P:Imms.Optional`1.None">
      <summary>
                Returns an instance indicating a missing value.
            </summary>
    </member>
    <member name="P:Imms.Optional`1.IsNone">
      <summary>
            Returns true if this optional value is None.
            </summary>
    </member>
    <member name="P:Imms.Optional`1.IsSome">
      <summary>
            Returns true if this optional value is Some.
            </summary>
    </member>
    <member name="P:Imms.Optional`1.Value">
      <summary>
            	Returns the underlying value, or throws an exception if none exists.
            </summary>
    </member>
    <member name="M:Imms.Optional`1.Equals(Imms.Optional{`0})">
      <summary>
            	Determines whether this optional value instance is equal to the specified optional value instance.
            </summary>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Imms.Optional`1.Equals(`0)">
      <summary>
            Determines if this optional value instance is equal to the specified concrete (non-optional) value.
            </summary>
      <param name="other">The concrete value.</param>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
    </member>
    <member name="M:Imms.Optional`1.op_BitwiseOr(Imms.Optional{`0},`0)">
      <summary>
                A None-coalescing operator, similar to the ?? null-coalescing operator. Returns the underlying value, or the specified default value if none exists.
            </summary>
      <param name="optional">The optional value.</param>
      <param name="default">The default value to return if <paramref name="optional" /> has no underlying value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Implicit(Imms.AnyNone)~Imms.Optional{`0}">
      <summary>
                Converts the <see cref="T:Imms.AnyNone" /> token to a proper optional value of type <typeparamref name="T" />, indicating a missing value.
            </summary>
      <param name="none">The none token.</param>
    </member>
    <member name="M:Imms.Optional`1.op_Implicit(`0)~Imms.Optional{`0}">
      <summary>
                Returns an optional value instance wrapping the specified value.
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:Imms.Optional`1.op_Explicit(Imms.Optional{`0})~`0">
      <summary>
                Unwraps the optional value.
            </summary>
      <param name="v">
      </param>
    </member>
    <member name="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.IAnyOptional)">
      <summary>
                Determines equality between optional values, where the underlying value type of the right-hand instance is unknown.
            </summary>
      <param name="a">The left-hand instance, the type of which is known.</param>
      <param name="b">The right-hand instance, the type of which is unknown.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.IAnyOptional)">
      <summary>
                Determines inequality between optional value instances,
            	 where the underlying value type of the right-hand instance is unknown. The inverse of the == operator.
            </summary>
      <param name="a">The left-hand instance, the type of which is known.</param>
      <param name="b">The right-hand instance, the type of which is unknown.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.Optional{`0})">
      <summary>
                Determines equality between optional value instances, where the underlying value is of the same type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.Optional{`0})">
      <summary>
                Determines inequality between optional value instances. The inverse of the == operator.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},`0)">
      <summary>
                Determines equality between an optional value and a concrete value.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},`0)">
      <summary>
                Determines inequality between an optional value and a concrete value. The inverse of the == operator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Equality(`0,Imms.Optional{`0})">
      <summary>
                Determines equality between an optional value and a concrete value.
            </summary>
      <param name="self">
      </param>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.op_Inequality(`0,Imms.Optional{`0})">
      <summary>
                Determines inequality between an optional value and a concrete value. The inverse of the == operator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.GetHashCode">
      <summary>
                Returns a hash code for this optional value instance. If it has an underlying value, the hash code of the underlying value is returned. Otherwise, a hash code of 0 is returned.
            </summary>
    </member>
    <member name="M:Imms.Optional`1.Some(`0)">
      <summary>
                Wraps the specified value in an optional type.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.Cast``1">
      <summary>
            	Casts the underlying value to a different type (if one exists), throwing InvalidCastException if the operation fails.
            </summary>
      <typeparam name="TOut">The type to cast to.</typeparam>
      <exception cref="T:System.InvalidCastException">Thrown if the conversion fails.</exception>
    </member>
    <member name="M:Imms.Optional`1.As``1">
      <summary>
                Casts the underlying value to a different type (if one exists), returning a missing value if the conversion fails.
            </summary>
      <typeparam name="TOut">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.Equals(System.Object)">
      <summary>
                Determines equality between the optional value and another object, which may be another optional value or a concrete value.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Imms.Optional`1.Equals``1(Imms.Optional{``0})">
      <summary>
            Determines equality between optional values of different types. None values are always equal, and Some values are equal if the underlying values are equal.
            </summary>
      <typeparam name="T2">The type of the second optional value.</typeparam>
      <param name="other">The other optional value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.Equals(Imms.IAnyOptional)">
      <summary>
            Determines if this optional value is equal to another optional value, where the underlying value type of the second optional value is unknown.
            </summary>
      <param name="other">The other optional value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional`1.ToString">
      <summary>
                Returns a string representation of this optional value. 
            </summary>
      <returns>
                A string that represents this optional value.
            </returns>
    </member>
    <member name="T:Imms.Optional">
      <summary>
            Contains extension and utility methods for dealing with Optional values.
            </summary>
    </member>
    <member name="P:Imms.Optional.None">
      <summary>
                Returns a special token that can be implicitly converted to a None optional value instance of any type.
            </summary>
    </member>
    <member name="M:Imms.Optional.NoneOf``1">
      <summary>
                Returns an optional value instance indicating a missing value of type <typeparamref name="T" /></summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.Optional.Some``1(``0)">
      <summary>
                Returns an optional value instance wrapping the specified value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="value">The value to wrap.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.OptionalExt">
      <summary>
                Static class with utility and extension methods for optional values.
            </summary>
    </member>
    <member name="M:Imms.OptionalExt.AsSome``1(``0)">
      <summary>
                Returns an optional value instance wrapping the specified value. This method can wrap nulls in Some.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="x">The value to wrap.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.AsOptional``1(System.Nullable{``0})">
      <summary>
            Converts the specified nullable value to an optional value. Null is represented as None.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="x">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.AsOptional``1(``0)">
      <summary>
            Converts the specified value to an optional type. Null is represented as None.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <param name="x">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)">
      <summary>
                Returns the underlying value of the optional value instance, or throws an exception if none exists.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="opt">
      </param>
      <param name="ex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})">
      <summary>
            Applies the specified function on the underlying value, if one exists, and returns the result. Otherwise, returns None.
            </summary>
      <typeparam name="T">The type of the input optional value.</typeparam>
      <typeparam name="TOut">The type of the output optional value..</typeparam>
      <param name="self">The optional value instance.</param>
      <param name="f">The function to apply, returning an optional value of a potentially different type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})">
      <summary>
                Applies the specified function on the underlying value, if one exists, and wraps the result in an optional value. Otherwise, returns None. Similar to the conditional access ?. operator.
            </summary>
      <typeparam name="T">The type of the input optional value.</typeparam>
      <typeparam name="TOut">The type of the output optional value.</typeparam>
      <param name="self">The optional value instance.</param>
      <param name="f">The function to apply.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0})">
      <summary>
            	Applies the ToString method on the underlying value, if one exists, and wraps the result in an optional value. Otherwise, returns None.
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="optional">The optional value on which the method is invoked. </param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0},System.IFormatProvider)">
      <summary>
                Applies the ToString method on the inner value, using the specified IFormatProvider, and wraps the result in an optional value. Otherwise, returns None.
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="optional">The optional value on which the method is invoked.</param>
      <param name="provider">The format provider, used as a parameter when calling ToString on the underlying value (if any).</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)">
      <summary>
                Compares an optional value instance to a concrete value. If an underlying value exists, compares it to the specified value. A missing value is smaller than any concrete value.
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="optional">The optional value which is compared to the other value.</param>
      <param name="other">The other, concrete value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})">
      <summary>
                Compares against another optional value instance, by comparing the underlying values (if those exist). A missing value is always smaller than an existing value. 
            </summary>
      <typeparam name="T">The type of value.</typeparam>
      <param name="optional">The first optional value, which is compared to the other optional value.</param>
      <param name="other">The second optional value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)">
      <summary>
            Returns the underlying value, or the specified default value if no underlying value exists.
            </summary>
      <param name="opt">
      </param>
      <param name="default">The default value, returned if this instance has no value.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})">
      <summary>
            Returns this instance if it has an underlying value, and otherwise returns the other optional value instance (whether it has a value or not).
            </summary>
      <param name="self">
      </param>
      <param name="other">The other optional value instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})">
      <summary>
            Applies a filter on the underlying value, returning None if the filter returns false.
            </summary>
      <param name="optional">
      </param>
      <param name="filter">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Imms.OptionalExt.Flatten``1(Imms.Optional{Imms.Optional{``0}})">
      <summary>
            Flattens a nested optional type, returning either the final underlying value, or None if no such value exists.
            </summary>
      <param name="optional">
      </param>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:Imms.AnyNone">
      <summary>
                Normally hidden. Used to indicate a generic None value that can be converted to a typed None. Also acts as a None value where the value type is unknown.
            </summary>
    </member>
    <member name="F:Imms.AnyNone.Instance">
      <summary>
            Returns the instance of AnyNone.
            </summary>
    </member>
    <member name="P:Imms.AnyNone.IsSome">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:Imms.AnyNone.IsNone">
      <summary>
            Returns true.
            </summary>
    </member>
    <member name="P:Imms.AnyNone.Value">
      <summary>
            Throws a <see cref="T:Imms.NoValueException" />.
            </summary>
    </member>
    <member name="T:Imms.SetRelation">
      <summary>
                Indicates the set-theoretic relation between two sets. 
            </summary>
    </member>
    <member name="F:Imms.SetRelation.None">
      <summary>
                The two sets satisfy none of the relations covered by this enumeration.
            </summary>
    </member>
    <member name="F:Imms.SetRelation.Equal">
      <summary>
                The two sets are equal.
            </summary>
    </member>
    <member name="F:Imms.SetRelation.ProperSubsetOf">
      <summary>
                The first set is a proper subset of the second one.
            </summary>
    </member>
    <member name="F:Imms.SetRelation.ProperSupersetOf">
      <summary>
                The first set is a proper superset of the second one.
            </summary>
    </member>
    <member name="F:Imms.SetRelation.Disjoint">
      <summary>
                The two sets share no elements in common.
            </summary>
    </member>
    <member name="T:Imms.ValueSelector`4">
      <summary>
            A selector used in map operations. Called when a key-value pair exists in both maps. It selects the value that will appear in the result.
            </summary>
      <typeparam name="TKey">The type of the key (used in both maps).</typeparam>
      <typeparam name="TVal1">The type of the value used in the current map.</typeparam>
      <typeparam name="TVal2">The type of the value used in the input map.</typeparam>
      <typeparam name="TOut">The type of the value in the result map.</typeparam>
      <param name="key">The key that appears in both maps.</param>
      <param name="value1">The value appearing in the current map.</param>
      <param name="value2">The value appearing in the input map.</param>
      <returns>The value that should appear in the result map.</returns>
    </member>
  </members>
</doc>