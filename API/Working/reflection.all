<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="Imms.Abstract">
      <assemblydata version="0.6.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Imms.Abstract</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Library of abstract collection classes for Imms.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gregory Rosenbaum</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Imms.Abstract</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Copyright © Gregory Rosenbaum 2013</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTrademarkAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.GuidAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f02e5cfe-c06f-41cf-aac1-27ba0bb70f63</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
    <assembly name="Imms">
      <assemblydata version="0.6.0.0" culture="" key="" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Imms</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>A powerful library of immutable and persistent data structures for the .NET platform.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyConfigurationAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Gregory Rosenbaum</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Copyright © Gregory Rosenbaum 2013</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Imms</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.ComVisibleAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Runtime.InteropServices.GuidAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>efa3e5dc-5425-4567-a4a3-2a6db77584c1</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Imms">
      <apidata name="Imms" group="namespace" />
      <elements>
        <element api="T:Imms.NoValueException" />
        <element api="T:Imms.Kvp" />
        <element api="T:Imms.IAnyOptional" />
        <element api="T:Imms.Optional`1" />
        <element api="T:Imms.Optional" />
        <element api="T:Imms.OptionalExt" />
        <element api="T:Imms.SetRelation" />
        <element api="T:Imms.ValueSelector`4" />
        <element api="T:Imms.ImmList" />
        <element api="T:Imms.ImmMap" />
        <element api="T:Imms.ImmSet" />
        <element api="T:Imms.ImmSortedMap" />
        <element api="T:Imms.ImmSortedSet" />
        <element api="T:Imms.ImmVector" />
        <element api="T:Imms.ImmSortedMap`2" />
        <element api="T:Imms.ImmSortedSet`1" />
        <element api="T:Imms.ImmMap`2" />
        <element api="T:Imms.ImmSet`1" />
        <element api="T:Imms.ImmList`1" />
        <element api="T:Imms.ImmVector`1" />
      </elements>
    </api>
    <api id="T:Imms.IAnyOptional">
      <apidata name="IAnyOptional" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <implementors>
        <type api="T:Imms.Optional`1" ref="false" />
      </implementors>
      <elements>
        <element api="P:Imms.IAnyOptional.IsSome" />
        <element api="P:Imms.IAnyOptional.IsNone" />
        <element api="P:Imms.IAnyOptional.Value" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="P:Imms.IAnyOptional.IsNone">
      <apidata name="IsNone" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsNone" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.IAnyOptional" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.IAnyOptional.IsSome">
      <apidata name="IsSome" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsSome" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.IAnyOptional" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.IAnyOptional.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <type api="T:System.Object" ref="true" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.IAnyOptional" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmList">
      <apidata name="ImmList" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmList.Empty``1" />
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Imms.ImmList.Of``1(``0[])" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmList.Empty``1">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmList.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList.Of``1(``0[])">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Imms.ImmList.Of``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmList.Of``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="ToImmList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmList`1">
      <apidata name="ImmList" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IList" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
      </implements>
      <elements>
        <element api="M:Imms.ImmList`1.Select``1(System.Func{`0,``0})" />
        <element api="M:Imms.ImmList`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.ImmList`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.ImmList`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
        <element api="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
        <element api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
        <element api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
        <element api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        <element api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
        <element api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmList`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmList`1.Cast``1" />
        <element api="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
        <element api="M:Imms.ImmList`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Imms.ImmList`1.AddFirst(`0)" />
        <element api="M:Imms.ImmList`1.AddFirstRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmList`1.AddFirstRange(Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.AddLast(`0)" />
        <element api="M:Imms.ImmList`1.AddLastRange(Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.AddLastRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmList`1.RemoveFirst" />
        <element api="M:Imms.ImmList`1.RemoveLast" />
        <element api="M:Imms.ImmList`1.Insert(System.Int32,`0)" />
        <element api="M:Imms.ImmList`1.InsertRange(System.Int32,Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmList`1.RemoveAt(System.Int32)" />
        <element api="M:Imms.ImmList`1.Reverse" />
        <element api="M:Imms.ImmList`1.Update(System.Int32,`0)" />
        <element api="M:Imms.ImmList`1.ForEach(System.Action{`0})" />
        <element api="M:Imms.ImmList`1.ForEachBack(System.Action{`0})" />
        <element api="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},`0)" />
        <element api="M:Imms.ImmList`1.op_Addition(`0,Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmList`1.op_Addition(System.Collections.Generic.IEnumerable{`0},Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},Imms.ImmList{`0})" />
        <element api="M:Imms.ImmList`1.ForEachBackWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmList`1.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmList`1.GetEnumerator" />
        <element api="P:Imms.ImmList`1.Empty" />
        <element api="P:Imms.ImmList`1.Length" />
        <element api="P:Imms.ImmList`1.First" />
        <element api="P:Imms.ImmList`1.Item(System.Int32,System.Int32)" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32)" />
        <element api="P:Imms.ImmList`1.IsEmpty" />
        <element api="P:Imms.ImmList`1.Last" />
        <element api="M:Imms.Abstract.AbstractSequential`2.TryGet(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(`1)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(System.Object)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.GetHashCode" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLastIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLast(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0}[])" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderByDescending``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Skip(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SkipWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Take(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.TakeWhile(System.Func{`0,System.Boolean})" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryFirst" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryLast" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddFirst(`0)">
      <apidata name="AddFirst" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddFirstRange(Imms.ImmList{`0})">
      <apidata name="AddFirstRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="last">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddFirstRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddFirstRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddLast(`0)">
      <apidata name="AddLast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddLastRange(Imms.ImmList{`0})">
      <apidata name="AddLastRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="last">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.AddLastRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddLastRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Cast``1">
      <apidata name="Cast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Cast``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Choose``1(System.Func{`0,Imms.Optional{``0}})">
      <apidata name="Choose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmList`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.First">
      <apidata name="First" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractSequential`2.First">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_First" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmList`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.ForEach(System.Action{`0})">
      <apidata name="ForEach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.ForEachBack(System.Action{`0})">
      <apidata name="ForEachBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.ForEachBack(System.Action{`0})">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.ForEachBackWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachBackWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.ForEachBackWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.ForEachWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:Imms.ImmList`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TElem2" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="elementSelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TElem2" index="1" api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <template name="TElem2" index="1" api="M:Imms.ImmList`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
        <template name="TElem2" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="2" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="valueSelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TElem2" index="1" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TElem2" index="1" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <apidata name="GroupJoin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TInner" />
        <template name="TKey" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="outerKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="1" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="innerKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TKey" index="1" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="resultSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="0" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
              <template name="TResult" index="2" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="1" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Imms.ImmList`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Insert(System.Int32,`0)">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.InsertRange(System.Int32,Imms.ImmList{`0})">
      <apidata name="InsertRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="list">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <apidata name="InsertRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.Item(System.Int32,System.Int32)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="from">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="to">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TInner" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="oKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="1" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="iKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TKey" index="1" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="1" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
                <template name="TInner" index="0" api="M:Imms.ImmList`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
        <template name="TInner" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="1" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="oKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TKey" index="2" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="iKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="1" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <template name="TKey" index="2" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TInner" index="1" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.Last">
      <apidata name="Last" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractSequential`2.Last">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Last" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmList`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmList`1.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                  <type api="T:Imms.ImmList`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmList`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},Imms.ImmList{`0})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="right">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.op_Addition(Imms.ImmList{`0},`0)">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.op_Addition(System.Collections.Generic.IEnumerable{`0},Imms.ImmList{`0})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.op_Addition(`0,Imms.ImmList{`0})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
        <parameter name="list">
          <type api="T:Imms.ImmList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.RemoveAt(System.Int32)">
      <apidata name="RemoveAt" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.RemoveFirst">
      <apidata name="RemoveFirst" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.RemoveLast">
      <apidata name="RemoveLast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Reverse">
      <apidata name="Reverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.Reverse">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.ImmList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmList`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})">
      <apidata name="Scan" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TRElem" index="0" api="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})" />
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Scan``1(``0,System.Func{``0,`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})">
      <apidata name="ScanBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TRElem" index="0" api="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Select``1(System.Func{`0,Imms.Optional{``0}})">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmList`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Select``1(System.Func{`0,``0})">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmList`1.Select``1(System.Func{`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.Select``1(System.Func{`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
      <apidata name="SelectMany" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TElem2" index="0" api="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TElem2" index="0" api="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
              <template name="TRElem" index="1" api="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="1" api="M:Imms.ImmList`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
      <apidata name="SelectMany" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmList`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmList`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Update(System.Int32,`0)">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmList`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Zip``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem2" index="0" api="M:Imms.ImmList`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmList`1" />
                <template name="TElem2" index="0" api="M:Imms.ImmList`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})">
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem2" index="0" api="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="selector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmList`1" />
              <template name="TElem2" index="0" api="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
              <template name="TRElem" index="1" api="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmList`1" ref="true">
          <specialization>
            <template name="TRElem" index="1" api="M:Imms.ImmList`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmList`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmMap">
      <apidata name="ImmMap" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmMap.CreateMap``2(System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
        <element api="M:Imms.ImmMap.Empty``2(System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmMap.CreateMap``2(System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="CreateMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="eq">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmMap.CreateMap``2(System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmMap.CreateMap``2(System.Collections.Generic.IEqualityComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmMap.CreateMap``2(System.Collections.Generic.IEqualityComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmMap.Empty``2(System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmMap.Empty``2(System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmMap.Empty``2(System.Collections.Generic.IEqualityComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmMap.Empty``2(System.Collections.Generic.IEqualityComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="kvps" params="true">
          <arrayOf rank="1">
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
                <template name="TValue" index="1" api="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
            <template name="TValue" index="1" api="M:Imms.ImmMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="ToImmMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="kvps">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
                  <template name="TValue" index="1" api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmMap.ToImmMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <apidata name="ToImmMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="sequence">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="valueSelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="equality">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmMap`2">
      <apidata name="ImmMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  <type api="T:Imms.ImmMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IDictionary" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.ImmMap`2.Empty(System.Collections.Generic.IEqualityComparer{`0})" />
        <element api="M:Imms.ImmMap`2.GetEnumerator" />
        <element api="M:Imms.ImmMap`2.TryGet(`0)" />
        <element api="M:Imms.ImmMap`2.Remove(`0)" />
        <element api="M:Imms.ImmMap`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
        <element api="M:Imms.ImmMap`2.ForEachWhile(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEachWhile(System.Func{`0,`1,System.Boolean})" />
        <element api="P:Imms.ImmMap`2.Length" />
        <element api="P:Imms.ImmMap`2.IsEmpty" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.ContainsKey(`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{`1,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Count(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEach(System.Action{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Any(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Find(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Set(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.SetRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.All(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Difference(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="P:Imms.Abstract.AbstractMap`3.Keys" />
        <element api="P:Imms.Abstract.AbstractMap`3.Values" />
        <element api="P:Imms.Abstract.AbstractMap`3.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.Empty(System.Collections.Generic.IEqualityComparer{`0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="equality" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
      <apidata name="Except" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <templates>
        <template name="TValue2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue2" index="0" api="M:Imms.ImmMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="subtraction" optional="true">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <template name="TValue2" index="0" api="M:Imms.ImmMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.ForEachWhile(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  <type api="T:Imms.ImmMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  <type api="T:Imms.ImmMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmMap`2.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  <type api="T:Imms.ImmMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmMap`2.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                  <type api="T:Imms.ImmMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.Remove(`0)">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="RemoveRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="keys">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmMap`2.TryGet(`0)">
      <apidata name="TryGet" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.TryGet(`0)">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
              <type api="T:Imms.ImmMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.ImmMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TValue" index="1" api="T:Imms.ImmMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmMap`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmSet">
      <apidata name="ImmSet" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmSet.Empty``1" />
        <element api="M:Imms.ImmSet.CreateSet``1(System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmSet.Of``1(``0[])" />
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSet.CreateSet``1(System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="CreateSet" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="eq">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSet.CreateSet``1(System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSet.CreateSet``1(System.Collections.Generic.IEqualityComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSet.Empty``1">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSet.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet.Of``1(``0[])">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Imms.ImmSet.Of``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSet.Of``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="ToImmSet" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmSet`1">
      <apidata name="ImmSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <type api="T:Imms.ImmSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.ISet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.ImmSet`1.Empty(System.Collections.Generic.IEqualityComparer{`0})" />
        <element api="M:Imms.ImmSet`1.Add(`0)" />
        <element api="M:Imms.ImmSet`1.Remove(`0)" />
        <element api="M:Imms.ImmSet`1.Contains(`0)" />
        <element api="M:Imms.ImmSet`1.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmSet`1.GetEnumerator" />
        <element api="P:Imms.ImmSet`1.Length" />
        <element api="P:Imms.ImmSet`1.IsEmpty" />
        <element api="M:Imms.Abstract.AbstractSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.RelatesTo(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Difference(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.ExceptInverse(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Except(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Intersect(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.AbstractSet`2.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.Add(`0)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Add(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.Contains(`0)">
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Contains(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.Empty(System.Collections.Generic.IEqualityComparer{`0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.ForEachWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <type api="T:Imms.ImmSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <type api="T:Imms.ImmSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSet`1.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <type api="T:Imms.ImmSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSet`1.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                  <type api="T:Imms.ImmSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSet`1.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Remove(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSet`1" />
              <type api="T:Imms.ImmSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSet`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmSortedMap">
      <apidata name="ImmSortedMap" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
        <element api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
        <element api="M:Imms.ImmSortedMap.CreateOrderedMap``2(System.Collections.Generic.IComparer{``0})" />
        <element api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
        <element api="M:Imms.ImmSortedMap.Empty``2" />
        <element api="M:Imms.ImmSortedMap.Empty``2(System.Collections.Generic.IComparer{``0})" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedMap.CreateOrderedMap``2(System.Collections.Generic.IComparer{``0})">
      <apidata name="CreateOrderedMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmSortedMap.CreateOrderedMap``2(System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.CreateOrderedMap``2(System.Collections.Generic.IComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.CreateOrderedMap``2(System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedMap.Empty``2">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Empty``2" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
        <template name="TValue" />
      </templates>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Empty``2" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.Empty``2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap.Empty``2(System.Collections.Generic.IComparer{``0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="cmp">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Empty``2(System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Empty``2(System.Collections.Generic.IComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.Empty``2(System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="kvps" params="true">
          <arrayOf rank="1">
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
                <template name="TValue" index="1" api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.Of``2(System.Collections.Generic.KeyValuePair{``0,``1}[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <apidata name="ToImmSortedMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="kvps">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
                  <template name="TValue" index="1" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <apidata name="ToImmSortedMap" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="kvps">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
                  <template name="TValue" index="1" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="cmp">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
            <template name="TValue" index="1" api="M:Imms.ImmSortedMap.ToImmSortedMap``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmSortedMap`2">
      <apidata name="ImmSortedMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  <type api="T:Imms.ImmSortedMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IDictionary" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.ImmSortedMap`2.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})" />
        <element api="M:Imms.ImmSortedMap`2.Empty(System.Collections.Generic.IComparer{`0})" />
        <element api="M:Imms.ImmSortedMap`2.GetEnumerator" />
        <element api="M:Imms.ImmSortedMap`2.TryGet(`0)" />
        <element api="M:Imms.ImmSortedMap`2.ForEachWhile(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEachWhile(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.ImmSortedMap`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmSortedMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
        <element api="M:Imms.ImmSortedMap`2.ByOrder(System.Int32)" />
        <element api="M:Imms.ImmSortedMap`2.Remove(`0)" />
        <element api="M:Imms.ImmSortedMap`2.RemoveMax" />
        <element api="M:Imms.ImmSortedMap`2.RemoveMin" />
        <element api="M:Imms.ImmSortedMap`2.IndexOf(`0)" />
        <element api="M:Imms.ImmSortedMap`2.Slice(Imms.Optional{`0},Imms.Optional{`0})" />
        <element api="P:Imms.ImmSortedMap`2.IsEmpty" />
        <element api="P:Imms.ImmSortedMap`2.Length" />
        <element api="P:Imms.ImmSortedMap`2.MaxItem" />
        <element api="P:Imms.ImmSortedMap`2.MinItem" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.ContainsKey(`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{`1,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Count(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEach(System.Action{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Any(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Find(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Set(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.SetRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.All(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Difference(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="P:Imms.Abstract.AbstractMap`3.Keys" />
        <element api="P:Imms.Abstract.AbstractMap`3.Values" />
        <element api="P:Imms.Abstract.AbstractMap`3.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                    <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.ByOrder(System.Int32)">
      <apidata name="ByOrder" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.Empty(System.Collections.Generic.IComparer{`0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="comparer">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
      <apidata name="Except" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <templates>
        <template name="TValue2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue2" index="0" api="M:Imms.ImmSortedMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="subtraction" optional="true">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue2" index="0" api="M:Imms.ImmSortedMap`2.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.ForEachWhile(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  <type api="T:Imms.ImmSortedMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  <type api="T:Imms.ImmSortedMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.IndexOf(`0)">
      <apidata name="IndexOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedMap`2.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  <type api="T:Imms.ImmSortedMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedMap`2.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                  <type api="T:Imms.ImmSortedMap`2" ref="true">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                      <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedMap`2.MaxItem">
      <apidata name="MaxItem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MaxItem" />
      <returns>
        <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedMap`2.MinItem">
      <apidata name="MinItem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MinItem" />
      <returns>
        <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.Remove(`0)">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.RemoveMax">
      <apidata name="RemoveMax" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.RemoveMin">
      <apidata name="RemoveMin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="RemoveRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="keys">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.Slice(Imms.Optional{`0},Imms.Optional{`0})">
      <apidata name="Slice" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="minimum" optional="true">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="maximum" optional="true">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.TryGet(`0)">
      <apidata name="TryGet" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.TryGet(`0)">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedMap`2.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})">
      <apidata name="Union" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractMap`3.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <type api="T:Imms.ImmSortedMap`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
                  <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="collision" optional="true">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
              <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.ImmSortedMap`2" />
            <template name="TValue" index="1" api="T:Imms.ImmSortedMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedMap`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmSortedSet">
      <apidata name="ImmSortedSet" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmSortedSet.Empty``1" />
        <element api="M:Imms.ImmSortedSet.Empty``1(System.Collections.Generic.IComparer{``0})" />
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Imms.ImmSortedSet.Of``1(``0[])" />
        <element api="M:Imms.ImmSortedSet.CreateOrderedSet``1(System.Collections.Generic.IComparer{``0})" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedSet.CreateOrderedSet``1(System.Collections.Generic.IComparer{``0})">
      <apidata name="CreateOrderedSet" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSortedSet.CreateOrderedSet``1(System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.CreateOrderedSet``1(System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedSet.Empty``1">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.ImmSortedSet.Empty``1" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet.Empty``1(System.Collections.Generic.IComparer{``0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="cmp">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSortedSet.Empty``1(System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.Empty``1(System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet.Of``1(``0[])">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.ImmSortedSet.Of``1(``0[])" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Imms.ImmSortedSet.Of``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.Of``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="ToImmSortedSet" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <apidata name="ToImmSortedSet" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="cmp">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmSortedSet`1">
      <apidata name="ImmSortedSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <type api="T:Imms.ImmSortedSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.ISet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.ImmSortedSet`1.IndexOf(`0)" />
        <element api="M:Imms.ImmSortedSet`1.Empty(System.Collections.Generic.IComparer{`0})" />
        <element api="M:Imms.ImmSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmSortedSet`1.Add(`0)" />
        <element api="M:Imms.ImmSortedSet`1.Remove(`0)" />
        <element api="M:Imms.ImmSortedSet`1.Contains(`0)" />
        <element api="M:Imms.ImmSortedSet`1.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmSortedSet`1.RemoveMax" />
        <element api="M:Imms.ImmSortedSet`1.ByOrder(System.Int32)" />
        <element api="M:Imms.ImmSortedSet`1.RemoveMin" />
        <element api="M:Imms.ImmSortedSet`1.GetEnumerator" />
        <element api="M:Imms.ImmSortedSet`1.Slice(Imms.Optional{`0},Imms.Optional{`0})" />
        <element api="P:Imms.ImmSortedSet`1.Length" />
        <element api="P:Imms.ImmSortedSet`1.MinItem" />
        <element api="P:Imms.ImmSortedSet`1.MaxItem" />
        <element api="P:Imms.ImmSortedSet`1.IsEmpty" />
        <element api="M:Imms.Abstract.AbstractSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.RelatesTo(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Difference(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.ExceptInverse(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Except(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Intersect(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.AbstractSet`2.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Add(`0)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Add(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.ByOrder(System.Int32)">
      <apidata name="ByOrder" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Contains(`0)">
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Contains(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Empty(System.Collections.Generic.IComparer{`0})">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="cm">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.ForEachWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <type api="T:Imms.ImmSortedSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <type api="T:Imms.ImmSortedSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.IndexOf(`0)">
      <apidata name="IndexOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedSet`1.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <type api="T:Imms.ImmSortedSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedSet`1.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                  <type api="T:Imms.ImmSortedSet`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedSet`1.MaxItem">
      <apidata name="MaxItem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MaxItem" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmSortedSet`1.MinItem">
      <apidata name="MinItem" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MinItem" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Remove(`0)">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.RemoveMax">
      <apidata name="RemoveMax" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.RemoveMin">
      <apidata name="RemoveMin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Slice(Imms.Optional{`0},Imms.Optional{`0})">
      <apidata name="Slice" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="minimum" optional="true">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="maximum" optional="true">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Union" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
              <type api="T:Imms.ImmSortedSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmSortedSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmSortedSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmSortedSet`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.ImmVector">
      <apidata name="ImmVector" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.ImmVector.Empty``1" />
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Imms.ImmVector.FromItems``1(``0[])" />
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Use ImmList for now.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmVector.Empty``1">
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmVector.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector.FromItems``1(``0[])">
      <apidata name="FromItems" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items" params="true">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Imms.ImmVector.FromItems``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmVector.FromItems``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="ToImmVector" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.ImmVector`1">
      <apidata name="ImmVector" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IList" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="F:Imms.ImmVector`1.MaxCapacity" />
        <element api="M:Imms.ImmVector`1.Select``1(System.Func{`0,``0})" />
        <element api="M:Imms.ImmVector`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.ImmVector`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.ImmVector`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
        <element api="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
        <element api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
        <element api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
        <element api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        <element api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
        <element api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmVector`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
        <element api="M:Imms.ImmVector`1.Cast``1" />
        <element api="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
        <element api="M:Imms.ImmVector`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Imms.ImmVector`1.GetEnumerator" />
        <element api="M:Imms.ImmVector`1.Skip(System.Int32)" />
        <element api="M:Imms.ImmVector`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmVector`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.ImmVector`1.AddLast(`0)" />
        <element api="M:Imms.ImmVector`1.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmVector`1.ForEachBackWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.ImmVector`1.ForEachBack(System.Action{`0})" />
        <element api="M:Imms.ImmVector`1.ForEach(System.Action{`0})" />
        <element api="M:Imms.ImmVector`1.Insert(System.Int32,`0)" />
        <element api="M:Imms.ImmVector`1.AddLastRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmVector`1.AddFirstRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.ImmVector`1.RemoveLast" />
        <element api="M:Imms.ImmVector`1.Update(System.Int32,`0)" />
        <element api="M:Imms.ImmVector`1.Take(System.Int32)" />
        <element api="P:Imms.ImmVector`1.Empty" />
        <element api="P:Imms.ImmVector`1.Length" />
        <element api="P:Imms.ImmVector`1.First" />
        <element api="P:Imms.ImmVector`1.IsEmpty" />
        <element api="P:Imms.ImmVector`1.Last" />
        <element api="M:Imms.Abstract.AbstractSequential`2.TryGet(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(`1)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(System.Object)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.GetHashCode" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLastIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLast(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0}[])" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderByDescending``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Reverse" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SkipWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.TakeWhile(System.Func{`0,System.Boolean})" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32,System.Int32)" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32)" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryFirst" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryLast" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.ObsoleteAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Use ImmList for now.</value>
          </argument>
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.ImmVector`1.AddFirstRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddFirstRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.AddLast(`0)">
      <apidata name="AddLast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmVector`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.AddLastRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddLastRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Cast``1">
      <apidata name="Cast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Cast``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Choose``1(System.Func{`0,Imms.Optional{``0}})">
      <apidata name="Choose" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Choose``1(System.Func{`0,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </arrayOf>
        </parameter>
        <parameter name="myStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="arrStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmVector`1.Empty">
      <apidata name="Empty" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Empty" />
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmVector`1.First">
      <apidata name="First" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractSequential`2.First">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_First" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmVector`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.ForEach(System.Action{`0})">
      <apidata name="ForEach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.ForEachBack(System.Action{`0})">
      <apidata name="ForEachBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.ForEachBack(System.Action{`0})">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.ForEachBackWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachBackWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.ForEachBackWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.ForEachWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})" />
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TElem2" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="elementSelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TElem2" index="1" api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <template name="TElem2" index="1" api="M:Imms.ImmVector`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})">
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
        <template name="TElem2" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="keySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="valueSelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TElem2" index="1" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TElem2" index="1" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.GroupBy``3(System.Func{`0,``2},System.Func{`0,``1},System.Func{``2,System.Collections.Generic.IEnumerable{``1},``0},System.Collections.Generic.IEqualityComparer{``2})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <apidata name="GroupJoin" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TInner" />
        <template name="TKey" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="outerKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="innerKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="resultSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="0" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
              <template name="TResult" index="2" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Imms.ImmVector`1.GroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Insert(System.Int32,`0)">
      <apidata name="Insert" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="T:Imms.ImmVector`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <apidata name="InsertRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmVector`1.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TInner" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="oKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="iKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="0" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="1" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
                <template name="TInner" index="0" api="M:Imms.ImmVector`1.Join``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})">
      <apidata name="Join" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
        <template name="TInner" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="inner">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TInner" index="1" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="oKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="iKeySelector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TInner" index="1" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TInner" index="1" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TKey" index="2" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Join``3(System.Collections.Generic.IEnumerable{``1},System.Func{`0,``2},System.Func{``1,``2},System.Func{`0,``1,``0},System.Collections.Generic.IEqualityComparer{``2})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmVector`1.Last">
      <apidata name="Last" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractSequential`2.Last">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Last" />
      <returns>
        <template name="T" index="0" api="T:Imms.ImmVector`1" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.ImmVector`1.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="P:Imms.Abstract.AbstractIterable`3.Length">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                  <type api="T:Imms.ImmVector`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Imms.ImmVector`1" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="F:Imms.ImmVector`1.MaxCapacity">
      <apidata name="MaxCapacity" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>1073741823</value>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.RemoveLast">
      <apidata name="RemoveLast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})">
      <apidata name="Scan" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})" />
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Scan``1(``0,System.Func{``0,`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})">
      <apidata name="ScanBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TRElem" index="0" api="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.ScanBack``1(``0,System.Func{``0,`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Select``1(System.Func{`0,Imms.Optional{``0}})">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Select``1(System.Func{`0,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Select``1(System.Func{`0,``0})">
      <apidata name="Select" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Select``1(System.Func{`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.Select``1(System.Func{`0,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
      <apidata name="SelectMany" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TElem2" index="0" api="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="rSelector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TElem2" index="0" api="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
              <template name="TRElem" index="1" api="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="1" api="M:Imms.ImmVector`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
      <apidata name="SelectMany" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TRElem" index="0" api="M:Imms.ImmVector`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="0" api="M:Imms.ImmVector`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Skip(System.Int32)">
      <apidata name="Skip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.Skip(System.Int32)">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Take(System.Int32)">
      <apidata name="Take" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractSequential`2.Take(System.Int32)">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <type api="T:Imms.ImmVector`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Imms.ImmVector`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Update(System.Int32,`0)">
      <apidata name="Update" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.ImmVector`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.ImmVector`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Zip``1(System.Collections.Generic.IEnumerable{``0})">
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem2" index="0" api="M:Imms.ImmVector`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Imms.ImmVector`1" />
                <template name="TElem2" index="0" api="M:Imms.ImmVector`1.Zip``1(System.Collections.Generic.IEnumerable{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})">
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TElem2" />
        <template name="TRElem" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem2" index="0" api="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="selector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.ImmVector`1" />
              <template name="TElem2" index="0" api="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
              <template name="TRElem" index="1" api="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.ImmVector`1" ref="true">
          <specialization>
            <template name="TRElem" index="1" api="M:Imms.ImmVector`1.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.ImmVector`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Kvp">
      <apidata name="Kvp" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.Kvp.Of``2(``0,``1)" />
        <element api="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})" />
        <element api="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="pair">
          <type api="T:System.Tuple`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})" />
              <template name="TValue" index="1" api="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})" />
            <template name="TValue" index="1" api="M:Imms.Kvp.Of``2(System.Tuple{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Kvp" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Kvp.Of``2(``0,``1)">
      <apidata name="Of" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="M:Imms.Kvp.Of``2(``0,``1)" />
        </parameter>
        <parameter name="v">
          <template name="TValue" index="1" api="M:Imms.Kvp.Of``2(``0,``1)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.Kvp.Of``2(``0,``1)" />
            <template name="TValue" index="1" api="M:Imms.Kvp.Of``2(``0,``1)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Kvp" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})">
      <apidata name="ToTuple" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <parameters>
        <parameter name="pair">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
              <template name="TValue" index="1" api="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
            <template name="TValue" index="1" api="M:Imms.Kvp.ToTuple``2(System.Collections.Generic.KeyValuePair{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Kvp" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.NoValueException">
      <apidata name="NoValueException" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.InvalidOperationException" ref="true" />
          <type api="T:System.SystemException" ref="true" />
          <type api="T:System.Exception" ref="true" />
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.NoValueException.#ctor(System.Type,System.String)" />
        <element api="M:System.Exception.GetBaseException">
          <apidata name="GetBaseException" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <implements>
            <member api="M:System.Runtime.InteropServices._Exception.GetBaseException">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <overrides>
            <member api="M:System.Object.ToString">
              <type api="T:System.Object" ref="true" />
            </member>
          </overrides>
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="M:System.Runtime.InteropServices._Exception.ToString">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <apidata name="GetObjectData" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="info">
              <type api="T:System.Runtime.Serialization.SerializationInfo" ref="true" />
            </parameter>
            <parameter name="context">
              <type api="T:System.Runtime.Serialization.StreamingContext" ref="false" />
            </parameter>
          </parameters>
          <implements>
            <member api="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
              <type api="T:System.Runtime.Serialization.ISerializable" ref="true" />
            </member>
            <member api="M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
          <attributes>
            <attribute>
              <type api="T:System.Security.SecurityCriticalAttribute" ref="true" />
            </attribute>
          </attributes>
        </element>
        <element api="M:System.Exception.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <implements>
            <member api="M:System.Runtime.InteropServices._Exception.GetType">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Message">
          <apidata name="Message" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Message" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.Message">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Data">
          <apidata name="Data" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_Data" />
          <returns>
            <type api="T:System.Collections.IDictionary" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.InnerException">
          <apidata name="InnerException" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_InnerException" />
          <returns>
            <type api="T:System.Exception" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.InnerException">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.TargetSite">
          <apidata name="TargetSite" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" final="true" />
          <propertydata get="true" />
          <getter name="get_TargetSite" />
          <returns>
            <type api="T:System.Reflection.MethodBase" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.TargetSite">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.StackTrace">
          <apidata name="StackTrace" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" />
          <getter name="get_StackTrace" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.StackTrace">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HelpLink">
          <apidata name="HelpLink" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_HelpLink" />
          <setter name="set_HelpLink" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.HelpLink">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.Source">
          <apidata name="Source" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <propertydata get="true" set="true" />
          <getter name="get_Source" />
          <setter name="set_Source" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <implements>
            <member api="P:System.Runtime.InteropServices._Exception.Source">
              <type api="T:System.Runtime.InteropServices._Exception" ref="true" />
            </member>
          </implements>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="P:System.Exception.HResult">
          <apidata name="HResult" group="member" subgroup="property" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <propertydata get="true" />
          <getter name="get_HResult" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Exception" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.NoValueException.#ctor(System.Type,System.String)">
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="t" optional="true">
          <type api="T:System.Type" ref="true" />
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
        <parameter name="message" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value />
          </argument>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.NoValueException" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Optional">
      <apidata name="Optional" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.Optional.NoneOf``1" />
        <element api="M:Imms.Optional.Some``1(``0)" />
        <element api="P:Imms.Optional.None" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="P:Imms.Optional.None">
      <apidata name="None" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_None" />
      <returns>
        <type api="T:Imms.AnyNone" ref="true" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Optional.NoneOf``1">
      <apidata name="NoneOf" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.Optional.NoneOf``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Optional.Some``1(``0)">
      <apidata name="Some" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="M:Imms.Optional.Some``1(``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.Optional.Some``1(``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Optional`1">
      <apidata name="Optional" group="type" subgroup="structure" />
      <typedata visibility="public" sealed="true" serializable="true" />
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.IEquatable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Imms.Optional`1" />
          </specialization>
        </type>
        <type api="T:System.IEquatable`1" ref="true">
          <specialization>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <template name="T" index="0" api="T:Imms.Optional`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:Imms.IAnyOptional" ref="true" />
      </implements>
      <elements>
        <element api="M:Imms.Optional`1.Equals(Imms.Optional{`0})" />
        <element api="M:Imms.Optional`1.Equals(`0)" />
        <element api="M:Imms.Optional`1.Equals(System.Object)" />
        <element api="M:Imms.Optional`1.Equals``1(Imms.Optional{``0})" />
        <element api="M:Imms.Optional`1.Equals(Imms.IAnyOptional)" />
        <element api="M:Imms.Optional`1.op_BitwiseOr(Imms.Optional{`0},`0)" />
        <element api="M:Imms.Optional`1.op_Implicit(Imms.AnyNone)~Imms.Optional{`0}" />
        <element api="M:Imms.Optional`1.op_Implicit(`0)~Imms.Optional{`0}" />
        <element api="M:Imms.Optional`1.op_Explicit(Imms.Optional{`0})~`0" />
        <element api="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.IAnyOptional)" />
        <element api="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.Optional{`0})" />
        <element api="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},`0)" />
        <element api="M:Imms.Optional`1.op_Equality(`0,Imms.Optional{`0})" />
        <element api="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.IAnyOptional)" />
        <element api="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.Optional{`0})" />
        <element api="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},`0)" />
        <element api="M:Imms.Optional`1.op_Inequality(`0,Imms.Optional{`0})" />
        <element api="M:Imms.Optional`1.GetHashCode" />
        <element api="M:Imms.Optional`1.Some(`0)" />
        <element api="M:Imms.Optional`1.Cast``1" />
        <element api="M:Imms.Optional`1.As``1" />
        <element api="M:Imms.Optional`1.ToString" />
        <element api="P:Imms.Optional`1.None" />
        <element api="P:Imms.Optional`1.IsNone" />
        <element api="P:Imms.Optional`1.IsSome" />
        <element api="P:Imms.Optional`1.Value" />
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)" source="extension">
          <apidata name="ValueOrError" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="ex">
              <type api="T:System.Exception" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)" />
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" source="extension">
          <apidata name="Map" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
            <template name="TOut" />
          </templates>
          <parameters>
            <parameter name="f">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
                  <type api="T:Imms.Optional`1" ref="false">
                    <specialization>
                      <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" source="extension">
          <apidata name="Map" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
            <template name="TOut" />
          </templates>
          <parameters>
            <parameter name="f">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
                  <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0})" source="extension">
          <apidata name="AsString" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0},System.IFormatProvider)" source="extension">
          <apidata name="AsString" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T">
              <constrained>
                <implements>
                  <type api="T:System.IConvertible" ref="true" />
                </implements>
              </constrained>
            </template>
          </templates>
          <parameters>
            <parameter name="provider">
              <type api="T:System.IFormatProvider" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <type api="T:System.String" ref="true" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" source="extension">
          <apidata name="CompareTo" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T">
              <constrained>
                <type api="T:System.Object" ref="true" />
                <implements>
                  <type api="T:System.IComparable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
                    </specialization>
                  </type>
                </implements>
              </constrained>
            </template>
          </templates>
          <parameters>
            <parameter name="other">
              <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" source="extension">
          <apidata name="CompareTo" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T">
              <constrained>
                <type api="T:System.Object" ref="true" />
                <implements>
                  <type api="T:System.IComparable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
                    </specialization>
                  </type>
                </implements>
              </constrained>
            </template>
          </templates>
          <parameters>
            <parameter name="other">
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" source="extension">
          <apidata name="Or" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="default">
              <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" source="extension">
          <apidata name="Or" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="other">
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="Filter" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" />
          </templates>
          <parameters>
            <parameter name="filter">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.Optional`1" ref="false">
              <specialization>
                <template name="T" index="0" api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.OptionalExt" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.As``1">
      <apidata name="As" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TOut" />
      </templates>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TOut" index="0" api="M:Imms.Optional`1.As``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Cast``1">
      <apidata name="Cast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TOut" />
      </templates>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TOut" index="0" api="M:Imms.Optional`1.Cast``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Equals(Imms.IAnyOptional)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:Imms.IAnyOptional" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Equals(Imms.Optional{`0})">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.IEquatable`1.Equals(`0)">
          <type api="T:System.IEquatable`1" ref="true">
            <specialization>
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="T" index="0" api="T:Imms.Optional`1" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Equals``1(Imms.Optional{``0})">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T2" index="0" api="M:Imms.Optional`1.Equals``1(Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ValueType.Equals(System.Object)">
          <type api="T:System.ValueType" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Equals(`0)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.IEquatable`1.Equals(`0)">
          <type api="T:System.IEquatable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ValueType.GetHashCode">
          <type api="T:System.ValueType" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="P:Imms.Optional`1.IsNone">
      <apidata name="IsNone" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsNone" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Imms.IAnyOptional.IsNone">
          <type api="T:Imms.IAnyOptional" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="P:Imms.Optional`1.IsSome">
      <apidata name="IsSome" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_IsSome" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="P:Imms.IAnyOptional.IsSome">
          <type api="T:Imms.IAnyOptional" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="P:Imms.Optional`1.None">
      <apidata name="None" group="member" subgroup="property" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_None" />
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="T:Imms.Optional`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_BitwiseOr(Imms.Optional{`0},`0)">
      <apidata name="BitwiseOr" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="default">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="T:Imms.Optional`1" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.IAnyOptional)">
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.IAnyOptional" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},Imms.Optional{`0})">
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Equality(Imms.Optional{`0},`0)">
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Equality(`0,Imms.Optional{`0})">
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
        <parameter name="self">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Explicit(Imms.Optional{`0})~`0">
      <apidata name="Explicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="v">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="T:Imms.Optional`1" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Implicit(Imms.AnyNone)~Imms.Optional{`0}">
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="none">
          <type api="T:Imms.AnyNone" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="T:Imms.Optional`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Implicit(`0)~Imms.Optional{`0}">
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="v">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="T:Imms.Optional`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.IAnyOptional)">
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.IAnyOptional" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},Imms.Optional{`0})">
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Inequality(Imms.Optional{`0},`0)">
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="other">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.op_Inequality(`0,Imms.Optional{`0})">
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
        <parameter name="self">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="T:Imms.Optional`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.Some(`0)">
      <apidata name="Some" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="item">
          <template name="T" index="0" api="T:Imms.Optional`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="T:Imms.Optional`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="M:Imms.Optional`1.ToString">
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.ValueType.ToString">
          <type api="T:System.ValueType" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="P:Imms.Optional`1.Value">
      <apidata name="Value" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Value" />
      <returns>
        <template name="T" index="0" api="T:Imms.Optional`1" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.Optional`1" ref="false" />
      </containers>
    </api>
    <api id="T:Imms.OptionalExt">
      <apidata name="OptionalExt" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <elements>
        <element api="M:Imms.OptionalExt.AsOptional``1(System.Nullable{``0})" />
        <element api="M:Imms.OptionalExt.AsOptional``1(``0)" />
        <element api="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)" />
        <element api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
        <element api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
        <element api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0})" />
        <element api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0},System.IFormatProvider)" />
        <element api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
        <element api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
        <element api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
        <element api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
        <element api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
        <element api="M:Imms.OptionalExt.Flatten``1(Imms.Optional{Imms.Optional{``0}})" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.AsOptional``1(System.Nullable{``0})">
      <apidata name="AsOptional" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained value="true" ctor="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="x">
          <type api="T:System.Nullable`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.AsOptional``1(System.Nullable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.OptionalExt.AsOptional``1(System.Nullable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.AsOptional``1(``0)">
      <apidata name="AsOptional" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="x">
          <template name="T" index="0" api="M:Imms.OptionalExt.AsOptional``1(``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.OptionalExt.AsOptional``1(``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0})">
      <apidata name="AsString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0},System.IFormatProvider)">
      <apidata name="AsString" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <implements>
              <type api="T:System.IConvertible" ref="true" />
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.AsString``1(Imms.Optional{``0},System.IFormatProvider)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="provider">
          <type api="T:System.IFormatProvider" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.String" ref="true" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})">
      <apidata name="CompareTo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="other">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)">
      <apidata name="CompareTo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.IComparable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="other">
          <template name="T" index="0" api="M:Imms.OptionalExt.CompareTo``1(Imms.Optional{``0},``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})">
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="filter">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.OptionalExt.Filter``1(Imms.Optional{``0},System.Func{``0,System.Boolean})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Flatten``1(Imms.Optional{Imms.Optional{``0}})">
      <apidata name="Flatten" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="optional">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="T" index="0" api="M:Imms.OptionalExt.Flatten``1(Imms.Optional{Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.OptionalExt.Flatten``1(Imms.Optional{Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})">
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TOut" />
      </templates>
      <parameters>
        <parameter name="self">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,Imms.Optional{``1}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})">
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TOut" />
      </templates>
      <parameters>
        <parameter name="self">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="f">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
              <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TOut" index="1" api="M:Imms.OptionalExt.Map``2(Imms.Optional{``0},System.Func{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})">
      <apidata name="Or" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="self">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="other">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},Imms.Optional{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)">
      <apidata name="Or" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="opt">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="default">
          <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Imms.OptionalExt.Or``1(Imms.Optional{``0},``0)" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)">
      <apidata name="ValueOrError" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="opt">
          <type api="T:Imms.Optional`1" ref="false">
            <specialization>
              <template name="T" index="0" api="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="ex">
          <type api="T:System.Exception" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Imms.OptionalExt.ValueOrError``1(Imms.Optional{``0},System.Exception)" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.OptionalExt" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.Runtime.CompilerServices.ExtensionAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="T:Imms.SetRelation">
      <apidata name="SetRelation" group="type" subgroup="enumeration" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <elements>
        <element api="F:Imms.SetRelation.None" />
        <element api="F:Imms.SetRelation.Equal" />
        <element api="F:Imms.SetRelation.ProperSubsetOf" />
        <element api="F:Imms.SetRelation.ProperSupersetOf" />
        <element api="F:Imms.SetRelation.Disjoint" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:System.FlagsAttribute" ref="true" />
        </attribute>
      </attributes>
    </api>
    <api id="F:Imms.SetRelation.Disjoint">
      <apidata name="Disjoint" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <value>8</value>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.SetRelation" ref="false" />
      </containers>
    </api>
    <api id="F:Imms.SetRelation.Equal">
      <apidata name="Equal" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.SetRelation" ref="false" />
      </containers>
    </api>
    <api id="F:Imms.SetRelation.None">
      <apidata name="None" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.SetRelation" ref="false" />
      </containers>
    </api>
    <api id="F:Imms.SetRelation.ProperSubsetOf">
      <apidata name="ProperSubsetOf" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <value>2</value>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.SetRelation" ref="false" />
      </containers>
    </api>
    <api id="F:Imms.SetRelation.ProperSupersetOf">
      <apidata name="ProperSupersetOf" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <value>4</value>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
        <type api="T:Imms.SetRelation" ref="false" />
      </containers>
    </api>
    <api id="T:Imms.ValueSelector`4">
      <apidata name="ValueSelector" group="type" subgroup="delegate" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TKey">
          <variance contravariant="true" />
        </template>
        <template name="TVal1">
          <variance contravariant="true" />
        </template>
        <template name="TVal2">
          <variance contravariant="true" />
        </template>
        <template name="TOut">
          <variance covariant="true" />
        </template>
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.ValueSelector`4" />
        </parameter>
        <parameter name="value1">
          <template name="TVal1" index="1" api="T:Imms.ValueSelector`4" />
        </parameter>
        <parameter name="value2">
          <template name="TVal2" index="2" api="T:Imms.ValueSelector`4" />
        </parameter>
      </parameters>
      <returns>
        <template name="TOut" index="3" api="T:Imms.ValueSelector`4" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms" />
      </containers>
    </api>
    <api id="N:Imms.Abstract">
      <apidata name="Imms.Abstract" group="namespace" />
      <elements>
        <element api="T:Imms.Abstract.AbstractIterable`3" />
        <element api="T:Imms.Abstract.IAnyIterableBuilder`1" />
        <element api="T:Imms.Abstract.IAnyMapBuilder`2" />
        <element api="T:Imms.Abstract.AbstractMap`3" />
        <element api="T:Imms.Abstract.AbstractSet`2" />
        <element api="T:Imms.Abstract.AbstractSequential`2" />
        <element api="T:Imms.Abstract.ISequentialBuilder`2" />
        <element api="T:Imms.Abstract.IAnySetBuilder`1" />
        <element api="T:Imms.Abstract.ISetBuilder`2" />
        <element api="T:Imms.Abstract.IMapBuilder`3" />
        <element api="T:Imms.Abstract.IIterableBuilder`2" />
        <element api="T:Imms.Abstract.IBuilderFactory`1" />
      </elements>
    </api>
    <api id="T:Imms.Abstract.AbstractIterable`3">
      <apidata name="AbstractIterable" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TElem" />
        <template name="TIterable">
          <constrained>
            <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                <template name="TIterable" index="1" api="T:Imms.Abstract.AbstractIterable`3" />
                <template name="TBuilder" index="2" api="T:Imms.Abstract.AbstractIterable`3" />
              </specialization>
            </type>
          </constrained>
        </template>
        <template name="TBuilder">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                  <template name="TIterable" index="1" api="T:Imms.Abstract.AbstractIterable`3" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
        <type api="T:Imms.Abstract.IBuilderFactory`1" ref="true">
          <specialization>
            <template name="TBuilder" index="2" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.op_Implicit(Imms.Abstract.AbstractIterable{`0,`1,`2})~`1" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="P:Imms.Abstract.AbstractIterable`3.IsEmpty" />
        <element api="P:Imms.Abstract.AbstractIterable`3.Length" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})">
      <apidata name="Aggregate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fold">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})">
      <apidata name="Aggregate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})">
      <apidata name="All" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})">
      <apidata name="Any" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)">
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </arrayOf>
        </parameter>
        <parameter name="arrayIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)">
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </arrayOf>
        </parameter>
        <parameter name="arrStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})">
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})">
      <apidata name="ForEach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.GetEnumerator">
      <apidata name="GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractIterable`3.IsEmpty">
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractIterable`3.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.op_Implicit(Imms.Abstract.AbstractIterable{`0,`1,`2})~`1">
      <apidata name="Implicit" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="o">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <template name="TIterable" index="1" api="T:Imms.Abstract.AbstractIterable`3" />
              <template name="TBuilder" index="2" api="T:Imms.Abstract.AbstractIterable`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TIterable" index="1" api="T:Imms.Abstract.AbstractIterable`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})">
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TResult" index="0" api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})">
      <apidata name="Print" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="sep" optional="true">
          <type api="T:System.String" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>; </value>
          </argument>
        </parameter>
        <parameter name="printFunc" optional="true">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.String" ref="true" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Single">
      <apidata name="Single" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.ToArray">
      <apidata name="ToArray" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <returns>
        <arrayOf rank="1">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})">
      <apidata name="Where" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractIterable`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TIterable" index="1" api="T:Imms.Abstract.AbstractIterable`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.AbstractMap`3">
      <apidata name="AbstractMap" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:Imms.Abstract.IMapBuilder`3" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Imms.ImmSortedMap`2" ref="true" />
          <type api="T:Imms.ImmMap`2" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
        <template name="TMap">
          <constrained>
            <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
            <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IDictionary" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
            <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.Abstract.AbstractMap`3.op_Addition(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.op_Addition(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Add(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.TryGet(`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.ContainsKey(`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{`1,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Count(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEach(System.Action{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Any(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.ForEachWhile(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Find(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Set(`0,`1)" />
        <element api="M:Imms.Abstract.AbstractMap`3.Remove(`0)" />
        <element api="M:Imms.Abstract.AbstractMap`3.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.SetRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.All(System.Func{`0,`1,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Difference(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})" />
        <element api="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="P:Imms.Abstract.AbstractMap`3.Keys" />
        <element api="P:Imms.Abstract.AbstractMap`3.Values" />
        <element api="P:Imms.Abstract.AbstractMap`3.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="P:Imms.Abstract.AbstractIterable`3.IsEmpty" />
        <element api="P:Imms.Abstract.AbstractIterable`3.Length" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                    <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                      <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                      <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                    </specialization>
                  </type>
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                      <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                    </specialization>
                  </type>
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                    <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                      <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                    <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                    <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="kvp">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Add(`0,`1)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
        <parameter name="value">
          <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <apidata name="AddRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})">
      <apidata name="Aggregate" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
        </parameter>
        <parameter name="accumulator">
          <type api="T:System.Func`4" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Aggregate``1(``0,System.Func{``0,`0,`1,``0})" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.All(System.Func{`0,`1,System.Boolean})">
      <apidata name="All" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Any(System.Func{`0,`1,System.Boolean})">
      <apidata name="Any" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.ContainsKey(`0)">
      <apidata name="ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </member>
        <member api="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
          <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Count(System.Func{`0,`1,System.Boolean})">
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Difference(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <apidata name="Difference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})">
      <apidata name="Except" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <templates>
        <template name="TValue2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue2" index="0" api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="subtraction" optional="true">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue2" index="0" api="M:Imms.Abstract.AbstractMap`3.Except``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,Imms.Optional{`1}})" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Find(System.Func{`0,`1,System.Boolean})">
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.ForEach(System.Action{`0,`1})">
      <apidata name="ForEach" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="act">
          <type api="T:System.Action`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.ForEachWhile(System.Func{`0,`1,System.Boolean})">
      <apidata name="ForEachWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="act">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})">
      <apidata name="Intersect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TValue2" />
      </templates>
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue2" index="0" api="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="selector">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue2" index="0" api="M:Imms.Abstract.AbstractMap`3.Intersect``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,``0}},Imms.ValueSelector{`0,`1,``0,`1})" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractMap`3.Item(`0)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
          <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractMap`3.Keys">
      <apidata name="Keys" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Keys" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
          <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`1})">
      <apidata name="MapEquals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="comparer">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`1})">
      <apidata name="MapEquals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="eqComparer" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.MapEquals(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Func{`1,`1,System.Boolean})">
      <apidata name="MapEquals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="equality">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.op_Addition(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
        <parameter name="kvps">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.op_Addition(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.KeyValuePair{`0,`1})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
        <parameter name="kvp">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
        <parameter name="kvps">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
        <parameter name="key">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.op_Subtraction(Imms.Abstract.AbstractMap{`0,`1,`2},`0)">
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="left">
          <type api="T:Imms.Abstract.AbstractMap`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})">
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="selector">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <type api="T:Imms.Optional`1" ref="false">
                <specialization>
                  <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TResult" index="0" api="M:Imms.Abstract.AbstractMap`3.Pick``1(System.Func{`0,`1,Imms.Optional{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="RemoveRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="keys">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Set(`0,`1)">
      <apidata name="Set" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
        <parameter name="value">
          <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.SetRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <apidata name="SetRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.TryGet(`0)">
      <apidata name="TryGet" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractMap`3.Union(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},Imms.ValueSelector{`0,`1,`1,`1})">
      <apidata name="Union" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
                  <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="collision" optional="true">
          <type api="T:Imms.ValueSelector`4" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <template name="TMap" index="2" api="T:Imms.Abstract.AbstractMap`3" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractMap`3.Values">
      <apidata name="Values" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Values" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
          <type api="T:System.Collections.Generic.IReadOnlyDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Imms.Abstract.AbstractMap`3" />
              <template name="TValue" index="1" api="T:Imms.Abstract.AbstractMap`3" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractMap`3" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.AbstractSequential`2">
      <apidata name="AbstractSequential" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                  <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Imms.ImmList`1" ref="true" />
          <type api="T:Imms.ImmVector`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TElem" />
        <template name="TList">
          <constrained>
            <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.IList`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.IList" ref="true" />
        <type api="T:System.Collections.ICollection" ref="true" />
        <type api="T:System.Collections.Generic.IReadOnlyList`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IReadOnlyCollection`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
        <type api="T:System.IEquatable`1" ref="true">
          <specialization>
            <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.Abstract.AbstractSequential`2.TryGet(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(`1)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Equals(System.Object)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.op_Equality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.op_Inequality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.GetHashCode" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.AggregateBack(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindIndex(`0)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLastIndex(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.FindLast(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.ForEachBack(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.ForEachBackWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0}[])" />
        <element api="M:Imms.Abstract.AbstractSequential`2.OrderByDescending``1(System.Func{`0,``0})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Reverse" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Skip(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.SkipWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractSequential`2.Take(System.Int32)" />
        <element api="M:Imms.Abstract.AbstractSequential`2.TakeWhile(System.Func{`0,System.Boolean})" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32,System.Int32)" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32)" />
        <element api="P:Imms.Abstract.AbstractSequential`2.First" />
        <element api="P:Imms.Abstract.AbstractSequential`2.Last" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryFirst" />
        <element api="P:Imms.Abstract.AbstractSequential`2.TryLast" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="P:Imms.Abstract.AbstractIterable`3.IsEmpty" />
        <element api="P:Imms.Abstract.AbstractIterable`3.Length" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.AggregateBack(System.Func{`0,`0,`0})">
      <apidata name="AggregateBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="fold">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})">
      <apidata name="AggregateBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="initial">
          <template name="TResult" index="0" api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
        </parameter>
        <parameter name="fold">
          <type api="T:System.Func`3" ref="true">
            <specialization>
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TResult" index="0" api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="0" api="M:Imms.Abstract.AbstractSequential`2.AggregateBack``1(``0,System.Func{``0,`0,``0})" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32)">
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <overrides>
        <member api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)">
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
                  <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </overrides>
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </arrayOf>
        </parameter>
        <parameter name="arrStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.CopyTo(`0[],System.Int32,System.Int32,System.Int32)">
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </arrayOf>
        </parameter>
        <parameter name="myStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="arrStart">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.Equals(System.Object)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.Equals(`1)">
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.IEquatable`1.Equals(`0)">
          <type api="T:System.IEquatable`1" ref="true">
            <specialization>
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.FindIndex(System.Func{`0,System.Boolean})">
      <apidata name="FindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.FindIndex(`0)">
      <apidata name="FindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="elem">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.FindLast(System.Func{`0,System.Boolean})">
      <apidata name="FindLast" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.FindLastIndex(System.Func{`0,System.Boolean})">
      <apidata name="FindLastIndex" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.First">
      <apidata name="First" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_First" />
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.ForEachBack(System.Action{`0})">
      <apidata name="ForEachBack" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="action">
          <type api="T:System.Action`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.ForEachBackWhile(System.Func{`0,System.Boolean})">
      <apidata name="ForEachBackWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="function">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.GetHashCode">
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="true" final="true" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <implements>
        <member api="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
          <type api="T:System.Collections.Generic.IReadOnlyList`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.Item(System.Int32,System.Int32)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="from">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="to">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.Last">
      <apidata name="Last" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <propertydata get="true" />
      <getter name="get_Last" />
      <returns>
        <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.op_Equality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})">
      <apidata name="Equality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.op_Inequality(Imms.Abstract.AbstractSequential{`0,`1},Imms.Abstract.AbstractSequential{`0,`1})">
      <apidata name="Inequality" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="a">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="b">
          <type api="T:Imms.Abstract.AbstractSequential`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0})">
      <apidata name="OrderBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="ordering">
          <type api="T:System.Collections.Generic.IComparer`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.OrderBy(System.Collections.Generic.IComparer{`0}[])">
      <apidata name="OrderBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="orderings" params="true">
          <arrayOf rank="1">
            <type api="T:System.Collections.Generic.IComparer`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.OrderBy``1(System.Func{`0,``0})">
      <apidata name="OrderBy" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey1" />
      </templates>
      <parameters>
        <parameter name="selector1">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TKey1" index="0" api="M:Imms.Abstract.AbstractSequential`2.OrderBy``1(System.Func{`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.OrderByDescending``1(System.Func{`0,``0})">
      <apidata name="OrderByDescending" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey1" />
      </templates>
      <parameters>
        <parameter name="selector1">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <template name="TKey1" index="0" api="M:Imms.Abstract.AbstractSequential`2.OrderByDescending``1(System.Func{`0,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.Reverse">
      <apidata name="Reverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <apidata name="SequenceEquals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="eq" optional="true">
          <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
            </specialization>
          </type>
          <argument>
            <type api="T:System.Object" ref="true" />
            <nullValue />
          </argument>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.Skip(System.Int32)">
      <apidata name="Skip" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.SkipWhile(System.Func{`0,System.Boolean})">
      <apidata name="SkipWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.Take(System.Int32)">
      <apidata name="Take" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.TakeWhile(System.Func{`0,System.Boolean})">
      <apidata name="TakeWhile" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="predicate">
          <type api="T:System.Func`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TList" index="1" api="T:Imms.Abstract.AbstractSequential`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.TryFirst">
      <apidata name="TryFirst" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TryFirst" />
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSequential`2.TryGet(System.Int32)">
      <apidata name="TryGet" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSequential`2.TryLast">
      <apidata name="TryLast" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_TryLast" />
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSequential`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSequential`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.AbstractSet`2">
      <apidata name="AbstractSet" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:Imms.Abstract.AbstractIterable`3" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
              <type api="T:Imms.Abstract.ISetBuilder`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                  <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
                </specialization>
              </type>
            </specialization>
          </type>
          <type api="T:System.Object" ref="true" />
        </ancestors>
        <descendents>
          <type api="T:Imms.ImmSortedSet`1" ref="true" />
          <type api="T:Imms.ImmSet`1" ref="true" />
        </descendents>
      </family>
      <templates>
        <template name="TElem" />
        <template name="TSet">
          <constrained>
            <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
              </specialization>
            </type>
          </constrained>
        </template>
      </templates>
      <implements>
        <type api="T:System.Collections.Generic.ISet`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
      </implements>
      <elements>
        <element api="M:Imms.Abstract.AbstractSet`2.op_Addition(Imms.Abstract.AbstractSet{`0,`1},`0)" />
        <element api="M:Imms.Abstract.AbstractSet`2.op_Addition(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.op_Subtraction(Imms.Abstract.AbstractSet{`0,`1},`0)" />
        <element api="M:Imms.Abstract.AbstractSet`2.op_Subtraction(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.op_BitwiseAnd(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.op_ExclusiveOr(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Contains(`0)" />
        <element api="M:Imms.Abstract.AbstractSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.RelatesTo(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Add(`0)" />
        <element api="M:Imms.Abstract.AbstractSet`2.Remove(`0)" />
        <element api="M:Imms.Abstract.AbstractSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Difference(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.ExceptInverse(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Except(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Intersect(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.AbstractSet`2.Item(`0)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Where(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEachWhile(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32,System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.CopyTo(`0[],System.Int32)" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate``1(``0,System.Func{``0,`0,``0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Aggregate(System.Func{`0,`0,`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.All(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Any(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Print(System.String,System.Func{`0,System.String})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Count(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Find(System.Func{`0,System.Boolean})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ForEach(System.Action{`0})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.GetEnumerator" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Pick``1(System.Func{`0,Imms.Optional{``0}})" />
        <element api="M:Imms.Abstract.AbstractIterable`3.Single" />
        <element api="M:Imms.Abstract.AbstractIterable`3.ToArray" />
        <element api="P:Imms.Abstract.AbstractIterable`3.IsEmpty" />
        <element api="P:Imms.Abstract.AbstractIterable`3.Length" />
        <element api="M:System.Object.ToString">
          <apidata name="ToString" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.String" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.Equals(System.Object)">
          <apidata name="Equals" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <parameters>
            <parameter name="obj">
              <type api="T:System.Object" ref="true" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetHashCode">
          <apidata name="GetHashCode" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="true" />
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:System.Object.GetType">
          <apidata name="GetType" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Type" ref="true" />
          </returns>
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.Object" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmList.ToImmList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </templates>
          <returns>
            <type api="T:Imms.ImmList`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmList" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension">
          <apidata name="ToImmMap" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="valueSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                  <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="equality">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmMap`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TValue" index="2" api="M:Imms.ImmMap.ToImmMap``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmMap" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSet.ToImmSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension">
          <apidata name="ToImmSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </templates>
          <parameters>
            <parameter name="eq" optional="true">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                </specialization>
              </type>
              <argument>
                <type api="T:System.Object" ref="true" />
                <nullValue />
              </argument>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmSortedSet.ToImmSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" source="extension">
          <apidata name="ToImmSortedSet" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </templates>
          <parameters>
            <parameter name="cmp">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:Imms.ImmSortedSet`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmSortedSet" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.ImmVector.ToImmVector``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToImmVector" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
          </templates>
          <returns>
            <type api="T:Imms.ImmVector`1" ref="true">
              <specialization>
                <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="Imms" module="Imms" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:Imms" />
            <type api="T:Imms.ImmVector" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Add(`0)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Contains(`0)">
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Difference(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Difference" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Except(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Except" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.ExceptInverse(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="ExceptInverse" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Intersect" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.IsDisjointWith(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="IsDisjointWith" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="IsProperSubsetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:System.Collections.Generic.ISet`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="IsProperSupersetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:System.Collections.Generic.ISet`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="IsSubsetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:System.Collections.Generic.ISet`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="IsSupersetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" final="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:System.Collections.Generic.ISet`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.AbstractSet`2.Item(`0)">
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" default="true" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_Addition(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="seq">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_Addition(Imms.Abstract.AbstractSet{`0,`1},`0)">
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_BitwiseAnd(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="BitwiseAnd" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="seq">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_ExclusiveOr(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="ExclusiveOr" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="seq">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_Subtraction(Imms.Abstract.AbstractSet{`0,`1},System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="seq">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.op_Subtraction(Imms.Abstract.AbstractSet{`0,`1},`0)">
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set">
          <type api="T:Imms.Abstract.AbstractSet`2" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
              <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.RelatesTo(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="RelatesTo" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.SetRelation" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="item">
          <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="SetEquals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
          <type api="T:System.Collections.Generic.ISet`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.AbstractSet`2.Union(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="Union" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <parameters>
        <parameter name="other">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.AbstractSet`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TSet" index="1" api="T:Imms.Abstract.AbstractSet`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.AbstractSet`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IAnyIterableBuilder`1">
      <apidata name="IAnyIterableBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TElem">
          <variance contravariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:Imms.Abstract.IAnyMapBuilder`2" ref="true" />
        <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true" />
        <type api="T:Imms.Abstract.IAnySetBuilder`1" ref="true" />
        <type api="T:Imms.Abstract.ISetBuilder`2" ref="true" />
        <type api="T:Imms.Abstract.IMapBuilder`3" ref="true" />
        <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)">
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="elem">
          <template name="TElem" index="0" api="T:Imms.Abstract.IAnyIterableBuilder`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <apidata name="AddRange" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="items">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TElem" index="0" api="T:Imms.Abstract.IAnyIterableBuilder`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.IAnyIterableBuilder`1.Length">
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IAnyMapBuilder`2">
      <apidata name="IAnyMapBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.IAnyMapBuilder`2" />
                <template name="TValue" index="1" api="T:Imms.Abstract.IAnyMapBuilder`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:Imms.Abstract.IMapBuilder`3" ref="true" />
      </implementors>
      <elements>
        <element api="M:Imms.Abstract.IAnyMapBuilder`2.TryGetKvp(`0)" />
        <element api="M:Imms.Abstract.IAnyMapBuilder`2.Remove(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnyMapBuilder`2.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.IAnyMapBuilder`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnyMapBuilder`2" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnyMapBuilder`2.TryGetKvp(`0)">
      <apidata name="TryGetKvp" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Imms.Abstract.IAnyMapBuilder`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Imms.Optional`1" ref="false">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.IAnyMapBuilder`2" />
                <template name="TValue" index="1" api="T:Imms.Abstract.IAnyMapBuilder`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnyMapBuilder`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IAnySetBuilder`1">
      <apidata name="IAnySetBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TElem">
          <variance contravariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.IAnySetBuilder`1" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:Imms.Abstract.ISetBuilder`2" ref="true" />
      </implementors>
      <elements>
        <element api="M:Imms.Abstract.IAnySetBuilder`1.Remove(`0)" />
        <element api="M:Imms.Abstract.IAnySetBuilder`1.Contains(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnySetBuilder`1.Contains(`0)">
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="value">
          <template name="TElem" index="0" api="T:Imms.Abstract.IAnySetBuilder`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnySetBuilder`1" ref="true" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IAnySetBuilder`1.Remove(`0)">
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <parameters>
        <parameter name="value">
          <template name="TElem" index="0" api="T:Imms.Abstract.IAnySetBuilder`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IAnySetBuilder`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IBuilderFactory`1">
      <apidata name="IBuilderFactory" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TBuilder">
          <variance covariant="true" />
        </template>
      </templates>
      <implementors>
        <type api="T:Imms.Abstract.AbstractIterable`3" ref="true" />
      </implementors>
      <elements>
        <element api="P:Imms.Abstract.IBuilderFactory`1.EmptyBuilder" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="P:Imms.Abstract.IBuilderFactory`1.EmptyBuilder">
      <apidata name="EmptyBuilder" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <propertydata get="true" />
      <getter name="get_EmptyBuilder" />
      <returns>
        <template name="TBuilder" index="0" api="T:Imms.Abstract.IBuilderFactory`1" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IBuilderFactory`1" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IIterableBuilder`2">
      <apidata name="IIterableBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TElem">
          <variance contravariant="true" />
        </template>
        <template name="TResult">
          <variance covariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.IIterableBuilder`2" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <implementors>
        <type api="T:Imms.Abstract.ISequentialBuilder`2" ref="true" />
        <type api="T:Imms.Abstract.ISetBuilder`2" ref="true" />
        <type api="T:Imms.Abstract.IMapBuilder`3" ref="true" />
      </implementors>
      <elements>
        <element api="M:Imms.Abstract.IIterableBuilder`2.Produce" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="M:Imms.Abstract.IIterableBuilder`2.Produce">
      <apidata name="Produce" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata abstract="true" virtual="true" />
      <returns>
        <template name="TResult" index="1" api="T:Imms.Abstract.IIterableBuilder`2" />
      </returns>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
        <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.IMapBuilder`3">
      <apidata name="IMapBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
        <template name="TMap">
          <variance covariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.IMapBuilder`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.IMapBuilder`3" />
              </specialization>
            </type>
            <template name="TMap" index="2" api="T:Imms.Abstract.IMapBuilder`3" />
          </specialization>
        </type>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Imms.Abstract.IMapBuilder`3" />
                <template name="TValue" index="1" api="T:Imms.Abstract.IMapBuilder`3" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:Imms.Abstract.IAnyMapBuilder`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Imms.Abstract.IMapBuilder`3" />
            <template name="TValue" index="1" api="T:Imms.Abstract.IMapBuilder`3" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.Abstract.IIterableBuilder`2.Produce" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.Abstract.IAnyMapBuilder`2.TryGetKvp(`0)" />
        <element api="M:Imms.Abstract.IAnyMapBuilder`2.Remove(`0)" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.ISequentialBuilder`2">
      <apidata name="ISequentialBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TElem">
          <variance contravariant="true" />
        </template>
        <template name="TList">
          <variance covariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.ISequentialBuilder`2" />
            <template name="TList" index="1" api="T:Imms.Abstract.ISequentialBuilder`2" />
          </specialization>
        </type>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.ISequentialBuilder`2" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
      </implements>
      <elements>
        <element api="M:Imms.Abstract.IIterableBuilder`2.Produce" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
    <api id="T:Imms.Abstract.ISetBuilder`2">
      <apidata name="ISetBuilder" group="type" subgroup="interface" />
      <typedata visibility="public" abstract="true" serializable="false" />
      <templates>
        <template name="TElem">
          <variance contravariant="true" />
        </template>
        <template name="TSet">
          <variance covariant="true" />
        </template>
      </templates>
      <implements>
        <type api="T:Imms.Abstract.IIterableBuilder`2" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.ISetBuilder`2" />
            <template name="TSet" index="1" api="T:Imms.Abstract.ISetBuilder`2" />
          </specialization>
        </type>
        <type api="T:Imms.Abstract.IAnyIterableBuilder`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.ISetBuilder`2" />
          </specialization>
        </type>
        <type api="T:System.IDisposable" ref="true" />
        <type api="T:Imms.Abstract.IAnySetBuilder`1" ref="true">
          <specialization>
            <template name="TElem" index="0" api="T:Imms.Abstract.ISetBuilder`2" />
          </specialization>
        </type>
      </implements>
      <elements>
        <element api="M:Imms.Abstract.IIterableBuilder`2.Produce" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.Add(`0)" />
        <element api="M:Imms.Abstract.IAnyIterableBuilder`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <element api="P:Imms.Abstract.IAnyIterableBuilder`1.Length" />
        <element api="M:System.IDisposable.Dispose">
          <apidata name="Dispose" group="member" subgroup="method" />
          <memberdata visibility="public" />
          <proceduredata abstract="true" virtual="true" />
          <containers>
            <library assembly="mscorlib" module="mscorlib" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System" />
            <type api="T:System.IDisposable" ref="true" />
          </containers>
        </element>
        <element api="M:Imms.Abstract.IAnySetBuilder`1.Remove(`0)" />
        <element api="M:Imms.Abstract.IAnySetBuilder`1.Contains(`0)" />
      </elements>
      <containers>
        <library assembly="Imms.Abstract" module="Imms.Abstract" kind="DynamicallyLinkedLibrary" />
        <namespace api="N:Imms.Abstract" />
      </containers>
    </api>
  </apis>
</reflection>