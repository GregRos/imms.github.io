///////////////////////////////////////////////////////////////////////////////
// Copyright (c) ENikS.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
var chai_1 = require("chai");
var linq_ts_1 = require("../src/linq-ts");
var jsn = [
    { "ids": [11, 21, 31], "name": "d" },
    { "ids": [12, 22, 32], "name": "c" },
    { "ids": [13, 23, 33], "name": "b" },
    { "ids": [14, 24, 34], "name": "a" }
];
describe('Testing LINQ -', function () {
    var fruits = ["grape", "passionfruit",
        "banana", "mango",
        "orange", "raspberry",
        "apple", "blueberry",
        "appla",];
    var julious = { Name: "Hedlund, Julious" };
    var magnus = { Name: "Hedlund, Magnus" };
    var terry = { Name: "Adams, Terry" };
    var charlotte = { Name: "Weiss, Charlotte" };
    var barley = { Name: "Barley", Age: 8, Owner: terry };
    var boots = { Name: "Boots", Age: 4, Owner: terry };
    var whiskers = { Name: "Whiskers", Age: 1, Owner: charlotte };
    var daisy = { Name: "Daisy", Age: 4, Owner: magnus };
    var people = [magnus, terry, charlotte];
    var pets = [barley, boots, whiskers, daisy];
    it('Average()', function () {
        var one = [0, 1, 2];
        var two = [0, 1, 2, 3, 4];
        var fourByThree = [-2, 1, 5];
        var oneByThree = [-2, 1, 2];
        chai_1.assert.equal(1, linq_ts_1.asEnumerable(one).Average());
        chai_1.assert.equal(2, linq_ts_1.asEnumerable(two).Average());
        chai_1.assert.equal(4.0 / 3, linq_ts_1.asEnumerable(fourByThree).Average());
        chai_1.assert.equal(1.0 / 3, linq_ts_1.asEnumerable(oneByThree).Average());
    });
    it('Aggregate()', function () {
        chai_1.assert.equal(6819160329805824, linq_ts_1.asEnumerable(jsn).SelectMany(function (a) { return a.ids; }, function (b) { return b; }).Aggregate(1, function (a, b) { return a * b; }));
    });
    it('All()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.isTrue(iterable.All(function (i) { return i > 0; }));
        for (var j = 1; j <= 10; j++)
            chai_1.assert.isFalse(iterable.All(function (i) { return i > j; }));
    });
    it('Any()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.isTrue(iterable.Any());
        for (var j = 0; j <= 9; j++)
            chai_1.assert.isTrue(iterable.Any(function (i) { return i > j; }));
        chai_1.assert.isFalse(iterable.Any(function (i) { return i > 10; }));
    });
    it('Contains', function () {
        chai_1.assert.isTrue(linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Contains(4));
        chai_1.assert.isFalse(linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Contains(43));
    });
    it('Concat()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 1, 2]).Concat([3, 4]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Count()', function () {
        chai_1.assert.equal(10, linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Count());
        chai_1.assert.equal(5, linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Where(function (a) { return a % 2 == 1; }).Count());
    });
    it('Distinct()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 0, 1, 3, 5, 6, 5, 7, 8, 8]).Distinct();
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        var test = [
            "add", "add",
            "subtract",
            "multiply",
            "hello",
            "class",
            "namespace",
            "namespace",
            "namespace"];
        var siterable = linq_ts_1.asEnumerable(test).Distinct();
        var siterator = siterable[Symbol.iterator]();
        chai_1.assert.equal("add", siterator.next().value);
        chai_1.assert.equal("subtract", siterator.next().value);
        chai_1.assert.equal("multiply", siterator.next().value);
        chai_1.assert.equal("hello", siterator.next().value);
        chai_1.assert.equal("class", siterator.next().value);
        chai_1.assert.equal("namespace", siterator.next().value);
        chai_1.assert.isTrue(siterator.next().done);
    });
    it('Except()', function () {
        var iterator = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9]).Except([2, 4, 6])[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupBy()', function () {
        var iterable = linq_ts_1.asEnumerable(pets).GroupBy(function (pet) { return pet.Age; }, function (pet) { return pet; });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.equal(8, result.key);
        chai_1.assert.equal(1, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(4, result.key);
        chai_1.assert.equal(2, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(1, result.key);
        chai_1.assert.equal(1, result.length);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupJoin()', function () {
        var iterable = linq_ts_1.asEnumerable(people)
            .GroupJoin(pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, petCollection) {
            return {
                Owner: person.Name,
                Pets: linq_ts_1.asEnumerable(petCollection)
                    .Select(function (pet) { return pet.Name; })
                    .ToArray()
            };
        });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.isTrue(Array.isArray(result.Pets));
        chai_1.assert.equal("Hedlund, Magnus", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Daisy", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal("Weiss, Charlotte", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Whiskers", result.Pets[0]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Min()', function () {
        var one = linq_ts_1.Range(1, 10).ToArray();
        var minusTen = [-1, -10, 10, 200, 1000];
        var hundred = [3000, 100, 200, 1000];
        chai_1.assert.equal(1, linq_ts_1.asEnumerable(one).Min());
        chai_1.assert.equal(-10, linq_ts_1.asEnumerable(minusTen).Min());
        chai_1.assert.equal(100, linq_ts_1.asEnumerable(hundred).Min());
    });
    it('Max()', function () {
        var ten = linq_ts_1.Range(1, 10).ToArray();
        var minusTen = [-100, -15, -50, -10];
        var thousand = [-16, 0, 50, 100, 1000];
        chai_1.assert.equal(10, linq_ts_1.asEnumerable(ten).Max());
        chai_1.assert.equal(-10, linq_ts_1.asEnumerable(minusTen).Max());
        chai_1.assert.equal(1000, linq_ts_1.asEnumerable(thousand).Max());
    });
    it('Range()', function () {
        var array = linq_ts_1.Range(1, 100).ToArray();
        chai_1.assert.equal(array.length, 100);
        for (var i = 0; i < array.length; i++)
            chai_1.assert.equal(array[i], i + 1);
    });
    it('Repeat()', function () {
        var iterable = linq_ts_1.asEnumerable().Repeat("Test", 5);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("Test", iterator.next().value);
        chai_1.assert.equal("Test", iterator.next().value);
        chai_1.assert.equal("Test", iterator.next().value);
        chai_1.assert.equal("Test", iterator.next().value);
        chai_1.assert.equal("Test", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Reverse()', function () {
        var array = linq_ts_1.Range(1, 100).ToArray();
        var iterator = linq_ts_1.asEnumerable(array).Reverse()[Symbol.iterator]();
        for (var i = 100; i > 0; i--) {
            chai_1.assert.equal(i, iterator.next().value);
        }
        chai_1.assert.isTrue(iterator.next().done);
        iterator = linq_ts_1.Range(1, 100).Reverse()[Symbol.iterator]();
        for (i = 100; i > 0; i--) {
            chai_1.assert.equal(i, iterator.next().value);
        }
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('DefaultIfEmpty()', function () {
        chai_1.assert.equal(0, linq_ts_1.asEnumerable([]).DefaultIfEmpty(0)[Symbol.iterator]().next().value);
        chai_1.assert.equal(1, linq_ts_1.asEnumerable([1]).DefaultIfEmpty(0)[Symbol.iterator]().next().value);
        chai_1.assert.equal('a', linq_ts_1.asEnumerable([]).DefaultIfEmpty('a')[Symbol.iterator]().next().value);
        chai_1.assert.equal(undefined, linq_ts_1.asEnumerable([]).DefaultIfEmpty()[Symbol.iterator]().next().value);
    });
    it('ElementAt()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(1, iterable.ElementAt(0));
        chai_1.assert.equal(6, iterable.ElementAt(5));
        chai_1.assert.throw(function () {
            iterable.ElementAt(50);
        });
    });
    it('ElementAtOrDefault()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(10, iterable.ElementAtOrDefault(9));
        chai_1.assert.equal(4, iterable.ElementAtOrDefault(3));
        chai_1.assert.doesNotThrow(function () {
            iterable.ElementAtOrDefault(50);
        });
        chai_1.assert.equal(0, iterable.ElementAtOrDefault(50));
    });
    it('First()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(1, iterable.First());
        chai_1.assert.equal(6, iterable.First(function (a) { return a > 5; }));
        chai_1.assert.throw(function () {
            iterable.First(function (a) { return a > 50; });
        });
    });
    it('FirstOrDefault()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(1, iterable.FirstOrDefault());
        chai_1.assert.equal(6, iterable.FirstOrDefault(function (a) { return a > 5; }));
        chai_1.assert.doesNotThrow(function () {
            iterable.FirstOrDefault(function (a) { return a > 50; });
        });
        chai_1.assert.equal(0, iterable.FirstOrDefault(function (a) { return a > 50; }));
    });
    it('Intersect()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]).Intersect([1, 3, 5, 11, 23, 44]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Join()', function () {
        var iterable = linq_ts_1.asEnumerable(people).Join(pets, function (person) { return person; }, function (pet) { return pet.Owner; }, function (person, pet) {
            return person.Name + " - " + pet.Name;
        });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("Hedlund, Magnus - Daisy", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Weiss, Charlotte - Whiskers", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OrderBy()', function () {
        var iterable = linq_ts_1.asEnumerable(jsn)
            .SelectMany(function (a) { return a.ids; }, function (b) { return b; }).OrderBy();
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        var citerable = linq_ts_1.asEnumerable(jsn).OrderBy(function (a) { return a.name; });
        var citerator = citerable[Symbol.iterator]();
        chai_1.assert.equal("d", citerator.next().value.name);
        chai_1.assert.equal("c", citerator.next().value.name);
        chai_1.assert.equal("b", citerator.next().value.name);
        chai_1.assert.equal("a", citerator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
        citerable = linq_ts_1.asEnumerable(jsn).OrderBy(function (a) { return a.name; }, function (b, c) { return b.charCodeAt(0) - c.charCodeAt(0); });
        citerator = citerable[Symbol.iterator]();
        chai_1.assert.equal("a", citerator.next().value.name);
        chai_1.assert.equal("b", citerator.next().value.name);
        chai_1.assert.equal("c", citerator.next().value.name);
        chai_1.assert.equal("d", citerator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OrderByDescending()', function () {
        var iterable = linq_ts_1.asEnumerable(jsn)
            .SelectMany(function (a) { return a.ids; }, function (b) { return b; }).OrderByDescending();
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
        var citerable = linq_ts_1.asEnumerable(jsn).OrderByDescending(function (a) { return a.name; }, function (b, c) { return b.charCodeAt(0) - c.charCodeAt(0); });
        var citerator = citerable[Symbol.iterator]();
        chai_1.assert.equal("d", citerator.next().value.name);
        chai_1.assert.equal("c", citerator.next().value.name);
        chai_1.assert.equal("b", citerator.next().value.name);
        chai_1.assert.equal("a", citerator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
        citerable = linq_ts_1.asEnumerable(jsn).OrderByDescending(function (a) { return a.name; });
        citerator = citerable[Symbol.iterator]();
        chai_1.assert.equal("a", citerator.next().value.name);
        chai_1.assert.equal("b", citerator.next().value.name);
        chai_1.assert.equal("c", citerator.next().value.name);
        chai_1.assert.equal("d", citerator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ThenBy()', function () {
        var iterable = linq_ts_1.asEnumerable(fruits)
            .OrderBy(function (fruit) { return fruit.length; })
            .ThenBy(function (fruit) { return fruit.charCodeAt(0); })
            .ThenBy(function (fruit) { return fruit.charCodeAt(4); });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("appla", iterator.next().value);
        chai_1.assert.equal("apple", iterator.next().value);
        chai_1.assert.equal("grape", iterator.next().value);
        chai_1.assert.equal("mango", iterator.next().value);
        chai_1.assert.equal("banana", iterator.next().value);
        chai_1.assert.equal("orange", iterator.next().value);
        chai_1.assert.equal("blueberry", iterator.next().value);
        chai_1.assert.equal("raspberry", iterator.next().value);
        chai_1.assert.equal("passionfruit", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ThenByDescending()', function () {
        var iterable = linq_ts_1.asEnumerable(fruits)
            .OrderByDescending(function (fruit) { return fruit.length; })
            .ThenByDescending(function (fruit) { return fruit.charCodeAt(0); })
            .ThenByDescending(function (fruit) { return fruit.charCodeAt(4); });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("passionfruit", iterator.next().value);
        chai_1.assert.equal("raspberry", iterator.next().value);
        chai_1.assert.equal("blueberry", iterator.next().value);
        chai_1.assert.equal("orange", iterator.next().value);
        chai_1.assert.equal("banana", iterator.next().value);
        chai_1.assert.equal("mango", iterator.next().value);
        chai_1.assert.equal("grape", iterator.next().value);
        chai_1.assert.equal("apple", iterator.next().value);
        chai_1.assert.equal("appla", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Last()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(10, iterable.Last());
        chai_1.assert.equal(10, iterable.Last(function (a) { return a > 5; }));
        chai_1.assert.throw(function () {
            iterable.Last(function (a) { return a > 50; });
        });
    });
    it('LastOrDefault()', function () {
        var iterable = linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        chai_1.assert.equal(10, iterable.LastOrDefault());
        chai_1.assert.equal(10, iterable.LastOrDefault(function (a) { return a > 5; }));
        chai_1.assert.doesNotThrow(function () {
            iterable.LastOrDefault(function (a) { return a > 50; });
        });
        chai_1.assert.equal(0, iterable.LastOrDefault(function (a) { return a > 50; }));
    });
    it('Select()', function () {
        var array = linq_ts_1.asEnumerable(jsn).Select(function (a, b) { return a.name; }).ToArray();
        chai_1.assert.equal(array.length, 4);
        chai_1.assert.equal('d', array[0]);
        chai_1.assert.equal('c', array[1]);
        chai_1.assert.equal('b', array[2]);
        chai_1.assert.equal('a', array[3]);
    });
    it('SelectMany()', function () {
        var iterable = linq_ts_1.asEnumerable(jsn).SelectMany(function (a) { return a.ids; }, function (b) { return b; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('SequenceEqual()', function () {
        chai_1.assert.isTrue(linq_ts_1.asEnumerable([0, 1, 2, 3]).SequenceEqual([0, 1, 2, 3]));
        chai_1.assert.isFalse(linq_ts_1.asEnumerable([0, 1, 2, 3]).SequenceEqual([0, 1, 2, 3, 4]));
        chai_1.assert.isFalse(linq_ts_1.asEnumerable([0, 1, 2, 3]).SequenceEqual([0, 1, 4, 3]));
    });
    it('Single()', function () {
        chai_1.assert.equal(4, linq_ts_1.asEnumerable([4]).Single());
        chai_1.assert.equal(2, linq_ts_1.asEnumerable([1, 2, 3]).Single(function (a) { return a == 2; }));
        chai_1.assert.throw(function () {
            linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Single(function (a) { return a > 5; });
        });
    });
    it('SingleOrDefault()', function () {
        chai_1.assert.equal(4, linq_ts_1.asEnumerable([4]).SingleOrDefault());
        chai_1.assert.equal(2, linq_ts_1.asEnumerable([1, 2, 3]).SingleOrDefault(function (a) { return a == 2; }));
        chai_1.assert.doesNotThrow(function () {
            linq_ts_1.asEnumerable([1, 2, 3]).SingleOrDefault(function (a) { return a > 50; });
        });
        chai_1.assert.equal(0, linq_ts_1.asEnumerable([1, 2, 3]).SingleOrDefault(function (a) { return a > 50; }));
    });
    it('Skip()', function () {
        chai_1.assert.equal(3, linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Skip(3).First());
    });
    it('SkipWhile()', function () {
        chai_1.assert.equal(4, linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).SkipWhile(function (a) { return a < 4; }).FirstOrDefault());
        var amounts = [
            5000, 2500, 9000, 8000,
            6500, 4000, 1500, 5500];
        var iterable = linq_ts_1.asEnumerable(amounts).SkipWhile(function (amount, index) { return amount > index * 1000; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(4000, iterator.next().value);
        chai_1.assert.equal(1500, iterator.next().value);
        chai_1.assert.equal(5500, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Sum()', function () {
        chai_1.assert.equal(270, linq_ts_1.asEnumerable(jsn).SelectMany(function (a) { return a.ids; }).Sum());
    });
    it('Take()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Take(3);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('TakeWhile()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).TakeWhile(function (a) { return a < 4; });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Union()', function () {
        var iterable = linq_ts_1.asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Union([5, 6, 7, 8, 9]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Where()', function () {
        chai_1.assert.isTrue(linq_ts_1.asEnumerable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).Where(function (a) { return a % 2 == 1; }).All(function (b) { return b % 2 == 1; }));
    });
    it('Zip()', function () {
        var numbers = [1, 2, 3, 4];
        var words = ["one", "two", "three"];
        var numbersAndWords = linq_ts_1.asEnumerable(numbers).Zip(words, function (first, second) { return first + " " + second; });
        var iterator = numbersAndWords[Symbol.iterator]();
        chai_1.assert.equal("1 one", iterator.next().value);
        chai_1.assert.equal("2 two", iterator.next().value);
        chai_1.assert.equal("3 three", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
});
describe('Enumerable - ', function () {
    it('GetEnumerator()', function () {
        var enumerable = linq_ts_1.asEnumerable(jsn).SelectMany(function (a) { return a.ids; }, function (b) { return b; });
        var enumerator = enumerable.GetEnumerator();
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(11, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(21, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(31, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(12, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(22, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(32, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(13, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(23, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(33, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(14, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(24, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(34, enumerator.Current);
        chai_1.assert.isFalse(enumerator.MoveNext());
    });
    it('Enumerate()', function () {
        var enumerable = linq_ts_1.Range(0, 100);
        var enumerator = enumerable.GetEnumerator();
        var index = 0;
        while (enumerator.MoveNext()) {
            chai_1.assert.equal(index++, enumerator.Current);
        }
    });
});
//# sourceMappingURL=linq_tests.js.map