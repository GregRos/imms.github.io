operations:
  - name: Add
    description: Add a new element to the set.

  - name: Contains
    description: Check if the set contains an element.

  - name: Remove
    description: Remove an element from the set


  - name: First

  - name: Last

  - name: Union

  - name: Intersection[seq]

  - name: Except

  - name: Difference

  - name: AddLast
    description: Add one element to the end.

  - name: AddLastRange
    description: Add a sequence of $m$ elements to the end.

  - name: AddFirst
    description: Add one element to the beginning.

  - name: AddFirstRange
    description: Add a sequence of $m$ elements to the beginning.

  - name: Concat
    description: Concatenate two collections, one with $n$ elements and the other with $m$ elements.
    inherit: AddLastRange

  - name: RemoveFirst
    description: Remove one element from the beginning.

  - name: RemoveLast
    description: Remove one element from the end.

  - name: Lookup
    description: Lookup element at index.

  - name: Update
    description: Update element at index.

  - name: Insert
    description: Insert element at index.

  - name: InsertRange
    description: Inserts a sequence of $m$ elements at index.

  - name: InsertConcat
    description: Concatenates a collection of the same type consisting of $m$ elements at an index.

  - name: RemoveAt
    description: Remove element at index.

  - name: Take
    description: Returns a starting subsequence.

  - name: Skip
    description: Returns an ending subsequence.

specialSetComplexity: &setComplexity O\left(\u{n} \log \left(1 + {\o{n} \over \u{n}}\right)\right)

collections:
  - collection: ImmList
    implementation: 2-3-4 Finger Tree
    rowclass: source--imms
    operations:
      - operation: AddLast
        simple: O(1)/O(\log n)
        advanced: O(1)/O(\log n)

      - operation: AddFirst
        simple: O(1)/O(\log n)
        advanced: O(1)/O(\log n)

      - operation: RemoveLast
        simple: O(1)/O(\log n)
        advanced: O(1)/O(\log n)

      - operation: RemoveFirst
        simple: O(1)/O(\log n)
        advanced: O(1)/O(\log n)

      - operation: AddLastRange
        simple: O(m)

      - operation: AddFirstRange
        simple: O(m)

      - operation: Concat
        simple: O(\log n)
        advanced: O(\min \left( \log m, \log n \right))

      - operation: Lookup
        simple: O(\log n)

      - operation: Update
        simple: O(\log n)

      - operation: Insert
        simple: O(\log n)

      - operation: InsertRange
        simple: O(m)
        advanced: O(m + \log n)

      - operation: InsertConcat
        simple: O(\log n)
        advanced: O(\log n + \log m)

      - operation: RemoveAt
        simple: O(\log n)

      - operation: Take
        simple: O(\log n)

      - operation: Skip
        simple: O(\log n)

      - operation: First
        simple: O(1)

      - operation: Last
        simple: O(1)

  - collection: System.ImmutableList
    rowclass: source--system
    implementation: Balanced binary tree
    operations:
      - operation: AddLast
        simple: O(\log n)

      - operation: AddFirst
        simple: O(\log n)

      - operation: RemoveLast
        simple: O(\log n)

      - operation: RemoveFirst
        simple: O(\log n)

      - operation: AddLastRange
        simple: O(m \log n)

      - operation: AddFirstRange
        simple: O(m \log n)

      - operation: Take
        simple: O(n)

      - operation: Skip
        simple: O(n)

      - operation: Update
        simple: O(\log n)

      - operation: Insert
        simple: O(\log n)

      - operation: Lookup
        simple: O(\log n)

      - operation: InsertRange
        simple: O(m \log n)

      - operation: RemoveAt
        simple: O(\log n)

      - operation: First
        simple: O(\log n)

      - operation: Last
        simple: O(\log n)

  - collection: ImmVector
    rowclass: source--imms
    implementation: Array-mapped trie
    operations:
      - operation: AddLast
        simple: O(\log n)\fast

      - operation: RemoveLast
        simple: O(\log n)\fast

      - operation: AddLastRange
        simple: O(m) \fastt

      - operation: AddFirstRange
        simple: O(n + m) \fastt

      - operation: Lookup
        simple: O(\log n) \fast

      - operation: Update
        simple: O(\log n)

      - operation: InsertRange
        simple: O(m + n) \fast

      - operation: Take

        simple: O(\log n) \fast

      - operation: Skip
        simple: O(n) \fast

      - operation: First
        simple: O(\log n)\fast

      - operation: Last
        simple: O(\log n)\fast

  - collection: ImmSet
    implementation: AVL Tree
    operations:
      - operation: Add
        simple: O(\log n)

      - operation: Remove
        simple: O(\log n)

      - operation: Contains
        simple: O(\log n)

      - operation: Bulk-Union
        simple: O(m \log n)

      - operation: Bulk-Intersect
        simple: (m \log n)

      - operation: Bulk-Except
        simple: O(m \log n)

      - operation: Bulk-Difference
        simple: O(m \log n + n \log m)

      - operation: Set-Union
        simple: *setComplexity

      - operation: Set-Intersect
        simple: *setComplexity

      - operation: Set-Except
        simple: *setComplexity

      - operation: Set-Difference
        simple: *setComplexity

footnotes:
  - name: amr
    math: O(f)/O(g)
    text: $O(f)$ is amortized time and $O(g)$ is worst-case.

  - name: fast
    math: \fast
    text: Performs very fast for this complexity.

  - name: fastt
    math: \fastt
    text: Performs exceptionally fast for this complexity.

tables:
  - table: sequentials
    collections: [ImmList, ImmVector, System.ImmutableList]
    operations: [First, Last, AddLast, AddFirst, RemoveLast, RemoveFirst, AddLastRange, AddFirstRange, Concat, Insert, Update, Lookup, InsertRange, InsertConcat, RemoveAt, Take, Skip]
    footnotes: [amr, fast, fastt]







