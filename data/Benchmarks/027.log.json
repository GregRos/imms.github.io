[
  {
    "Test": "Seq-AddFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.98317
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.64607
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.0110099999999997
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.019645
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Insert",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        35.05749
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Remove",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        22.03434
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        13.550130000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.858685
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.215415
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.11681000000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.069135
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.127135
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.03725
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.0949250000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.1363050000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Concat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.010215
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertConcat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.014725000000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.0033550000000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Slice",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.00499
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.092585
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.372605
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.76384
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.7337000000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.23543000000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.96384
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.040505
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.154895
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.15360500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.06769
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.34534000000000004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.12025000000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Concat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.19537
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertConcat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.22529
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.0025650000000000004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.04197
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Slice",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.023325000000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.03004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.311675
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.514995000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.8004500000000014
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.167330000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Insert",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        29.240640000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Remove",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.924615
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.475475
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.3609050000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.3685
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.9778449999999999
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.98005500000000012
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.89042500000000013
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.28297
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.12672
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.587385000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Concat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.417505
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertConcat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.93244
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.6432000000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.506705
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Slice",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.25885
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.0324400000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.97627
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.09482
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.661175
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.31682
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.592245
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.21204
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.56156500000000009
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.136
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.970035
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.22112500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        68.0951
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        30.431175000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.7175850000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.090145000000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.42827000000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        48.143240000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        17.02149
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.756655000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        56.957400000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        33.972775
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.12389
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.036795
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        89.464375
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        87.235605
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        56.355680000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        35.016015
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.5858050000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.31161000000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        8.436655
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        50.414305
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        57.368085000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        158.18779
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        71.32929
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        40.006785
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        48.224075000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        217.035255
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.621455000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        28.674950000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.8225700000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8621650000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.026075000000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.3535200000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.252815
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        30.936590000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        43.266180000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.911625
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        57.63129
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        85.24414
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        94.883395000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        48.427005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.63877
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.86692
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.7342750000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.01726
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.9833950000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.57593
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.177695
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.78236
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        17.385460000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.3766500000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.42047
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        22.407145
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        85.02816
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        47.371805
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.568835
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.50836
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.012890000000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.3120400000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.113290000000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.502395
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Set_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.747495
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        60.098940000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        80.14601
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        81.675480000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Ratio": null
  },
  {
    "Test": "Set-Array_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        70.688880000000012
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Ratio": null
  },
  {
    "Test": "Map-Lookup",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.188435
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.31468
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveKey",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        19.21611
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.138645
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.032685000000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        51.151375
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.85693
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.05905
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.87771
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.289885000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveKey",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.146805000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.8357550000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.44932500000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        92.97817
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        42.06308
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.61888
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.5819500000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.0484750000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveKey",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.696605
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.7442350000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.137215
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        56.87604
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        58.995115
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8527550000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        35.174005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.8587000000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveKey",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        63.875225
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        33.559885
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.3027
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        91.804885
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        68.18526
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.96753
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.618905
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.080975
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveKey",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.007170000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        33.97817
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.029200000000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        90.78735
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        64.065500000000014
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.325675
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  }
]