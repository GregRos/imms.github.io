[
  {
    "Test": "Add",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        58.52786
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        56.96508
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.27735
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        18.7596
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.40827
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        42.05958
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.03836
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        14.607225
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        48.84879
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        30.103465
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.10615
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.5663350000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        79.23344
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        80.65676
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        127.41826499999999
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        58.99706
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.440740000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.30019500000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.7187600000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        42.705960000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        65.87285
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        133.47844500000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        86.73952
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        40.474940000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        63.700720000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        209.05999000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        50.017335
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        37.887615
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.3589
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.05699
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.02354
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.96353
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.138695
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        25.477710000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.838820000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.001575
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        51.546445000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        74.598155
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        85.480225
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        39.362175
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        21.497685
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.703925
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.516995
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.02051
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8135850000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.4283100000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8163700000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.1471
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        14.799970000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.92336
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.18638
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        19.035805000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        74.731295
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        79.137855
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.073530000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.045415
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.01054
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 50000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.467955
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.081075
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.156105
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.58948
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        45.437300000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        73.19828
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        73.439205
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        63.043905000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  }
]