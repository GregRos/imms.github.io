[
  {
    "Test": "AddFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.97712
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.459965
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "RemoveLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.91384
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8826150000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Insert",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.332715
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        21.552500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Update",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.77232
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.829575
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Lookup",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.12367
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.086645
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "First",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.070595
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Last",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.11742000000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLastRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.99035000000000006
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddFirstRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.0865300000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Insert Range",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.08196
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.00998
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.01429
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Take",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.004505
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Skip",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.0036500000000000005
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.090795
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.0724050000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "RemoveLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.4489600000000005
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Update",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.53784
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.23410999999999998
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Lookup",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.97497000000000011
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.04071
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "First",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.18854500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Last",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.164145
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLastRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.07010000000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddFirstRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.48569500000000004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Insert Range",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.176465
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.170085
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.27056
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Take",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.000945
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Skip",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.05825
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.031115000000000004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.225355
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.296825000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "RemoveLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.8429150000000014
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.333765000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Insert",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        27.493095
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.96399
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Update",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.080760000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.268815
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Lookup",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.36139
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.00585
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "First",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.93151000000000006
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Last",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.84906
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLastRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.7492
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddFirstRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.425630000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Insert Range",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.748885
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.653905
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        17.00053
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Take",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.45812
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Skip",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.58662
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.9697900000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.283965
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "RemoveLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.12852
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Update",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.64104
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.333865
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Lookup",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.605545
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.21751499999999999
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "First",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.57651000000000008
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Last",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.128365
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddLastRange",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.91617
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.20927500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        68.42626
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        35.80955
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.373535
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.00479
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.418785
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        45.905085
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.59019
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.06765
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.272025000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        33.236235
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.939325
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.83797
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        87.286285
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        87.043575
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.41937
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.367445000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.779745
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.336505
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        8.04628
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        48.127970000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        56.344730000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        157.1155
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        73.055295
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        40.120490000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        47.418455
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        214.30943500000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.09111
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        25.072005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.600495
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8337050000000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.024755000000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.23098
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.0298050000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        29.059620000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        39.49759
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.646100000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.580095000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        78.258855000000011
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        89.974315
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        45.78362
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.463065
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.8084350000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.55616
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.017120000000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.76261
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.499735
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.06068
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.268
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.983315
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.9552700000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.940105
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.60987
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        79.772990000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Remove",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        47.619195000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Contains",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.26759
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.3845
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.011225
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.0193850000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.735015
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.4055500000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.55719
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        44.73427
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        73.0325
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        72.81311500000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        64.255525
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Lookup",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.92702
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.177105
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveKey",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        17.11694
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.034550000000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        46.690560000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.76363
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.142945
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Lookup",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.778345
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.550825
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveKey",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.133215000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.43479999999999996
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        84.405885
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        40.977655000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.5832700000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Lookup",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.088025
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.877685
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveKey",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        29.994864999999997
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.106955
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.44334
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.323250000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.7646650000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Lookup",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.52947
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.4611100000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveKey",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        59.37476
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.30458
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        109.74086
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        87.80209
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.9025450000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Lookup",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        31.743155
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.8721
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveKey",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        46.023810000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.025375
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Add",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        81.228345
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "AddRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        51.257615
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "RemoveRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.311865
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  }
]