[
  {
    "Test": "Seq-AddFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.6756800000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.099915
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.9494150000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveFirst",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.91953
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Insert",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        33.402405
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Remove",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        21.407600000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.8346
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.82779
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.2214350000000005
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.087360000000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.07047
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.11022000000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.02075
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.07314
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.07908
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.00984
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.014924999999999999
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.004025
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.003635
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.094230000000000008
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.04947
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.316785
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.34917
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.232755
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.94787
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.0392
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.15362
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.15415
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.078185
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.341295
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.12549000000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.19542
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.21818500000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmVector",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.001645
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.039155
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "ImmVector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.031004999999999998
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        19.847050000000003
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Adds arbitrary items repeatedly to the beginning of the sequence.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.263080000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.5671150000000011
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveFirst",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        9.63095
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Insert",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        27.629875000000006
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Remove",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.952375
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.029225
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.291225
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.2974
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.11173
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.861095
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.80805500000000008
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.639990000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddFirstRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.396705
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the beginning {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-InsertRange",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.391165
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Concat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        15.620860000000002
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "InsertConcat",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.613825
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableList",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Take",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.6399650000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Skip",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.40474000000000004
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "System.ImmutableList",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.042455
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.7151650000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "DequeSingle",
    "Ratio": null
  },
  {
    "Test": "Seq-RemoveLast",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        8.603245
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Update",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.045195000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly updates items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.323925
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Lookup",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.59823500000000007
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "Randomly looks up {iters} items by index from the entire collection.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.216335
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-First",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.5521100000000001
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-Last",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.136325
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 20000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Seq-AddLastRange",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.778145
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 2,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "Description": "Adds a collection of items to the end {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Iterate",
    "Target": "FSharpx.Vector",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.20882499999999998
      ]
    },
    "Target_InitialSize": 10000,
    "Iterations": 1,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Integers by Length\"; ElementType = System.Int32; Range = (2, 16)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        65.38269
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        30.420460000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.4107150000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.88476
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.43842500000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        50.405535
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.445445
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.452815
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.05552
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Union",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.83625
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Intersection",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.916855
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Except",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.857125
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Difference",
    "Target": "System.ImmutableSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        85.918605
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        84.370505000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        54.898785
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.17154
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.6506799999999995
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.31354000000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        8.165955
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        47.629115
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        55.339650000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        148.54657
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "System.ImmutableSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Union",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        71.90947
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Intersection",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        38.81591
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Except",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        46.110785000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Difference",
    "Target": "System.ImmutableSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        211.315985
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        51.407130000000009
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        30.173725
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.63464
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.80152
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.026745
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.15004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.88797
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        28.926415000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        38.97611
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "FSharp.Set",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Union",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.843345
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Intersection",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.132410000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Except",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        77.26701
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Difference",
    "Target": "FSharp.Set",
    "Time": {
      "Case": "Time",
      "Fields": [
        87.499885
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        45.375455
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        12.605075000000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.727975
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.554635
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.016605
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.7568250000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.4751800000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.885165
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        4.3294900000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Union",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.270770000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Intersection",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.14705
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Except",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        7.125465
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Difference",
    "Target": "ImmSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        20.87107
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Set-Add",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        77.568220000000011
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Remove",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        35.47654
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set-Contains",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        31.502325000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "Determines if a random element of the set is part of it, {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.22943
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.010275000000000001
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.73814
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.525145
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        3.3506750000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Set_Set-Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        10.229235
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "ImmSortedSet",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Union",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        43.446360000000006
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic union with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Intersection",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        71.211045
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic intersection with another data structure {iters} times.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Except",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        72.04151
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic relative complement (or Except) operation.",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Array_Set-Difference",
    "Target": "ImmSortedSet",
    "Time": {
      "Case": "Time",
      "Fields": [
        62.352865000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "Computes the set-theoretic symmetric difference operation.",
    "Class": "SetOperation",
    "Ratio": null
  },
  {
    "Test": "Map-Lookup",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.87242
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.2215800000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Remove",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        16.818810000000003
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.821775
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.031705
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        46.216045
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        51.569820000000007
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "ImmMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.03235
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.83776
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        11.352340000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Remove",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.806110000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        5.484145
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.46526500000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        86.753250000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        41.233345
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "System.ImmutableDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.693305
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.065525
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.852335
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Remove",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        29.23851
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.2157250000000008
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.103545
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        53.791105
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.47281
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "FSharp.Map",
    "Time": {
      "Case": "Time",
      "Fields": [
        1.6728850000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.73409
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        6.62988
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Remove",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        59.42564
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        34.6406
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.29231
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        84.301105
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        64.95484
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "System.ImmutableSortedDict",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.92464
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  },
  {
    "Test": "Map-Lookup",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        31.892360000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IEnumerator",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.0497500000000004
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Remove",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        46.07287
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Contains",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        32.12092
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "IterateN",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        0.025420000000000005
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 30000,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-Add",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        79.337830000000011
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-AddRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        52.157295
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 10000,
    "DataSource_Type": "Array",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]",
    "Description": "",
    "Class": "",
    "Ratio": null
  },
  {
    "Test": "Map-RemoveRange",
    "Target": "ImmSortedMap",
    "Time": {
      "Case": "Time",
      "Fields": [
        2.2934200000000002
      ]
    },
    "Target_InitialSize": 1000,
    "Iterations": 3,
    "DataSource_Size": 0,
    "DataSource_Type": "",
    "Target_InitialGenerator": "[Name = \"Unique Strings of Letters by Length\"; ElementType = System.String; Range = (1, 10)]",
    "DataGenerator": "",
    "Description": "",
    "Class": "",
    "Ratio": {
      "Case": "Some",
      "Fields": [
        0.6
      ]
    }
  }
]